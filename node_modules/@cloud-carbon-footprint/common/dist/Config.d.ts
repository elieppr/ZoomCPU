import { AWS_RECOMMENDATIONS_SERVICES } from './RecommendationsService';
import { AccountDetailsOrIdList } from './Types';
export interface CCFConfig {
    AWS?: {
        INCLUDE_ESTIMATES?: boolean;
        USE_BILLING_DATA?: boolean;
        BILLING_ACCOUNT_ID?: string;
        BILLING_ACCOUNT_NAME?: string;
        ATHENA_DB_NAME?: string;
        ATHENA_DB_TABLE?: string;
        ATHENA_QUERY_RESULT_LOCATION?: string;
        ATHENA_REGION?: string;
        IS_AWS_GLOBAL?: boolean;
        NAME?: string;
        RECOMMENDATIONS_SERVICE?: AWS_RECOMMENDATIONS_SERVICES;
        COMPUTE_OPTIMIZER_BUCKET?: string;
        CURRENT_SERVICES?: {
            key: string;
            name: string;
        }[];
        CURRENT_REGIONS?: string[];
        RESOURCE_TAG_NAMES?: string[];
        accounts?: AccountDetailsOrIdList;
        authentication?: {
            mode: string;
            options?: Record<string, string>;
        };
    };
    GCP?: {
        NAME?: string;
        CURRENT_SERVICES?: {
            key: string;
            name: string;
        }[];
        CURRENT_REGIONS?: string[];
        projects?: AccountDetailsOrIdList;
        USE_CARBON_FREE_ENERGY_PERCENTAGE?: boolean;
        INCLUDE_ESTIMATES?: boolean;
        USE_BILLING_DATA?: boolean;
        BIG_QUERY_TABLE?: string;
        BILLING_PROJECT_ID?: string;
        BILLING_PROJECT_NAME?: string;
        CACHE_BUCKET_NAME?: string;
        VCPUS_PER_CLOUD_COMPOSER_ENVIRONMENT?: number;
        VCPUS_PER_GKE_CLUSTER?: number;
        RESOURCE_TAG_NAMES?: string[];
    };
    AZURE?: {
        INCLUDE_ESTIMATES?: boolean;
        USE_BILLING_DATA?: boolean;
        authentication?: {
            mode: string;
            clientId?: string;
            clientSecret?: string;
            certificatePath?: string;
            tenantId?: string;
        };
        RESOURCE_TAG_NAMES?: string[];
        CONSUMPTION_CHUNKS_DAYS?: number;
        SUBSCRIPTION_CHUNKS?: number;
        SUBSCRIPTIONS: string[];
    };
    ALI?: {
        NAME?: string;
        INCLUDE_ESTIMATES?: boolean;
        authentication?: {
            accessKeyId: string;
            accessKeySecret: string;
        };
    };
    LOGGING_MODE?: string;
    CACHE_MODE?: string;
    ON_PREMISE?: {
        SERVER?: {
            CPU_UTILIZATION?: number;
            AVERAGE_WATTS?: number;
        };
        LAPTOP?: {
            CPU_UTILIZATION?: number;
            AVERAGE_WATTS?: number;
        };
        DESKTOP?: {
            CPU_UTILIZATION?: number;
            AVERAGE_WATTS?: number;
        };
    };
    MONGODB?: {
        URI?: string;
        CREDENTIALS?: string;
    };
    ELECTRICITY_MAPS_TOKEN?: string;
}
export declare enum GroupBy {
    day = "day",
    week = "week",
    month = "month",
    quarter = "quarter",
    year = "year"
}
export declare type QUERY_DATE_TYPES = {
    [key in GroupBy]: string;
};
declare const getConfig: () => CCFConfig;
export default getConfig;
