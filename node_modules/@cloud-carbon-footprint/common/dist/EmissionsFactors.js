"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getElectricityMapsData = exports.getEmissionsFactors = exports.zoneIntensityFactors = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const index_1 = require("./index");
const helpers_1 = require("./helpers");
exports.zoneIntensityFactors = {};
const getEmissionsFactors = async (region, dateTime, emissionsFactors, mappedRegionsToElectricityMapZones, logger) => {
    const electricityMapsToken = (0, index_1.configLoader)().ELECTRICITY_MAPS_TOKEN;
    const electricityMapsZone = mappedRegionsToElectricityMapZones[region];
    if (!electricityMapsToken || !electricityMapsZone) {
        if (electricityMapsToken && !electricityMapsZone) {
            logger.warn(`Electricity Maps zone not found for ${region}. Using default emissions factors.`);
        }
        return emissionsFactors;
    }
    if (exports.zoneIntensityFactors[dateTime]?.[electricityMapsZone]) {
        return {
            [region]: exports.zoneIntensityFactors[dateTime][electricityMapsZone],
        };
    }
    let response;
    try {
        response = await (0, exports.getElectricityMapsData)(electricityMapsZone, dateTime);
    }
    catch (e) {
        throw new Error(`Failed to get data from Electricity Maps. Reason ${e.message}.`);
    }
    if (!response?.carbonIntensity) {
        logger.warn(`Electricity Maps zone data was not found for ${region}. Using default emissions factors.`);
        return emissionsFactors;
    }
    if (exports.zoneIntensityFactors[dateTime]) {
        exports.zoneIntensityFactors[dateTime][electricityMapsZone] =
            (0, helpers_1.convertGramsToMetricTons)(response.carbonIntensity);
    }
    else {
        exports.zoneIntensityFactors[dateTime] = {
            [electricityMapsZone]: (0, helpers_1.convertGramsToMetricTons)(response.carbonIntensity),
        };
    }
    return {
        [region]: exports.zoneIntensityFactors[dateTime][electricityMapsZone],
    };
};
exports.getEmissionsFactors = getEmissionsFactors;
const getElectricityMapsData = async (electricityMapsZone, dateTime) => {
    try {
        const url = `https://api.electricitymap.org/v3/carbon-intensity/past?zone=${electricityMapsZone}&datetime=${dateTime}`;
        const res = await (0, node_fetch_1.default)(url, {
            headers: {
                'auth-token': (0, index_1.configLoader)().ELECTRICITY_MAPS_TOKEN,
            },
        });
        return await res.json();
    }
    catch (e) {
        throw new Error(`Electricity Maps request failed. Reason: ${e.message}.`);
    }
};
exports.getElectricityMapsData = getElectricityMapsData;
//# sourceMappingURL=EmissionsFactors.js.map