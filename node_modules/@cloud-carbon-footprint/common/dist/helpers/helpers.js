"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapToArabic = exports.getPeriodEndDate = exports.getHoursInMonth = exports.wait = exports.endsWithAny = exports.containsAny = void 0;
const moment_1 = __importDefault(require("moment"));
const containsAny = (substrings, stringToSearch) => {
    return substrings.some((substring) => new RegExp(`\\b${substring}\\b`).test(stringToSearch));
};
exports.containsAny = containsAny;
const endsWithAny = (suffixes, string) => {
    return suffixes.some((suffix) => string.endsWith(suffix));
};
exports.endsWithAny = endsWithAny;
const wait = async (ms) => {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
};
exports.wait = wait;
const getHoursInMonth = () => {
    return (0, moment_1.default)().utc().daysInMonth() * 24;
};
exports.getHoursInMonth = getHoursInMonth;
const getPeriodEndDate = (startDate, grouping) => {
    const periodGrouping = {
        day: moment_1.default.utc(startDate).add(1, 'd').subtract(1, 's').toDate(),
        week: moment_1.default.utc(startDate).add(1, 'w').subtract(1, 's').toDate(),
        month: moment_1.default.utc(startDate).add(1, 'M').subtract(1, 's').toDate(),
        quarter: moment_1.default
            .utc(startDate)
            .add(1, 'Q')
            .add(1, 'h')
            .subtract(1, 's')
            .toDate(),
        year: moment_1.default.utc(startDate).add(1, 'y').subtract(1, 's').toDate(),
    };
    return periodGrouping[grouping];
};
exports.getPeriodEndDate = getPeriodEndDate;
const mapToArabic = (unit) => {
    if (unit == 'ä¸‡') {
        return 10000;
    }
    else {
        return 100000000;
    }
};
exports.mapToArabic = mapToArabic;
//# sourceMappingURL=helpers.js.map