"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = require("winston");
const { combine, timestamp, label, printf } = winston_1.format;
const logging_winston_1 = require("@google-cloud/logging-winston");
const ConfigLoader_1 = __importDefault(require("./ConfigLoader"));
const env = process.env.NODE_ENV || 'development';
var LOGGING_LEVELS;
(function (LOGGING_LEVELS) {
    LOGGING_LEVELS["ERROR"] = "error";
    LOGGING_LEVELS["INFO"] = "info";
    LOGGING_LEVELS["DEBUG"] = "debug";
})(LOGGING_LEVELS || (LOGGING_LEVELS = {}));
class Logger {
    constructor(logLabel) {
        this.format = printf(({ level, message, label, timestamp }) => {
            return `${timestamp} [${label}] ${level}: ${message} `;
        });
        this.logLabel = logLabel;
    }
    get logger() {
        if (!this._logger) {
            try {
                switch ((0, ConfigLoader_1.default)().LOGGING_MODE) {
                    case 'GCP':
                        this._logger = this.getGCPLogger();
                        break;
                    default:
                        this._logger = this.getDefaultLogger(this.logLabel);
                }
            }
            catch (error) {
                this._logger = this.getDefaultLogger(this.logLabel).error(error);
            }
        }
        return this._logger;
    }
    getGCPLogger() {
        return (0, winston_1.createLogger)({
            level: this.getLogLevel(env),
            transports: [new winston_1.transports.Console(), new logging_winston_1.LoggingWinston()],
            silent: env === 'test',
        });
    }
    getDefaultLogger(logLabel) {
        return (0, winston_1.createLogger)({
            level: this.getLogLevel(env),
            format: combine(label({ label: logLabel }), timestamp(), this.format),
            transports: [
                new winston_1.transports.Console({
                    format: winston_1.format.combine(winston_1.format.colorize(), this.format),
                }),
                new winston_1.transports.File({
                    filename: 'logs/error.log',
                    level: LOGGING_LEVELS.ERROR,
                }),
                new winston_1.transports.File({ filename: 'logs/combined.log' }),
            ],
            silent: env === 'test',
        });
    }
    getLogLevel(env) {
        if (env === 'test' || env === 'development') {
            return LOGGING_LEVELS.DEBUG;
        }
        return LOGGING_LEVELS.INFO;
    }
    debug(message) {
        this.logger.debug(message);
    }
    info(message) {
        this.logger.info(message);
    }
    warn(message) {
        this.logger.warn(message);
    }
    error(message, error) {
        this.logger.error(message + error.stack);
    }
}
exports.default = Logger;
//# sourceMappingURL=Logger.js.map