import { ZodSchema, z } from 'zod';
/**
 * Validation schema for manifests.
 */
export declare const manifestSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    tags: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        kind: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        complexity: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        category: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        kind?: string | null | undefined;
        complexity?: string | null | undefined;
        category?: string | null | undefined;
    }, {
        kind?: string | null | undefined;
        complexity?: string | null | undefined;
        category?: string | null | undefined;
    }>>>;
    aggregation: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        metrics: z.ZodArray<z.ZodString, "many">;
        type: z.ZodEnum<["horizontal", "vertical", "both"]>;
    }, "strip", z.ZodTypeAny, {
        type: "horizontal" | "vertical" | "both";
        metrics: string[];
    }, {
        type: "horizontal" | "vertical" | "both";
        metrics: string[];
    }>>>;
    params: z.ZodNullable<z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        aggregation: z.ZodEnum<["sum", "none", "avg"]>;
        unit: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description: string;
        aggregation: "sum" | "none" | "avg";
        unit: string;
    }, {
        name: string;
        description: string;
        aggregation: "sum" | "none" | "avg";
        unit: string;
    }>, "many">>>;
    initialize: z.ZodObject<{
        plugins: z.ZodRecord<z.ZodString, z.ZodObject<{
            path: z.ZodString;
            method: z.ZodString;
            'global-config': z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            path: string;
            method: string;
            'global-config'?: Record<string, any> | undefined;
        }, {
            path: string;
            method: string;
            'global-config'?: Record<string, any> | undefined;
        }>>;
        outputs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        plugins: Record<string, {
            path: string;
            method: string;
            'global-config'?: Record<string, any> | undefined;
        }>;
        outputs?: string[] | undefined;
    }, {
        plugins: Record<string, {
            path: string;
            method: string;
            'global-config'?: Record<string, any> | undefined;
        }>;
        outputs?: string[] | undefined;
    }>;
    tree: z.ZodRecord<z.ZodString, z.ZodAny>;
    'if-version': z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    initialize: {
        plugins: Record<string, {
            path: string;
            method: string;
            'global-config'?: Record<string, any> | undefined;
        }>;
        outputs?: string[] | undefined;
    };
    tree: Record<string, any>;
    description?: string | null | undefined;
    tags?: {
        kind?: string | null | undefined;
        complexity?: string | null | undefined;
        category?: string | null | undefined;
    } | null | undefined;
    aggregation?: {
        type: "horizontal" | "vertical" | "both";
        metrics: string[];
    } | null | undefined;
    params?: {
        name: string;
        description: string;
        aggregation: "sum" | "none" | "avg";
        unit: string;
    }[] | null | undefined;
    'if-version'?: string | null | undefined;
}, {
    name: string;
    initialize: {
        plugins: Record<string, {
            path: string;
            method: string;
            'global-config'?: Record<string, any> | undefined;
        }>;
        outputs?: string[] | undefined;
    };
    tree: Record<string, any>;
    description?: string | null | undefined;
    tags?: {
        kind?: string | null | undefined;
        complexity?: string | null | undefined;
        category?: string | null | undefined;
    } | null | undefined;
    aggregation?: {
        type: "horizontal" | "vertical" | "both";
        metrics: string[];
    } | null | undefined;
    params?: {
        name: string;
        description: string;
        aggregation: "sum" | "none" | "avg";
        unit: string;
    }[] | null | undefined;
    'if-version'?: string | null | undefined;
}>;
/**
 * Validates given `manifest` object to match pattern.
 */
export declare const validateManifest: (manifest: any) => {
    name: string;
    initialize: {
        plugins: Record<string, {
            path: string;
            method: string;
            'global-config'?: Record<string, any> | undefined;
        }>;
        outputs?: string[] | undefined;
    };
    tree: Record<string, any>;
    description?: string | null | undefined;
    tags?: {
        kind?: string | null | undefined;
        complexity?: string | null | undefined;
        category?: string | null | undefined;
    } | null | undefined;
    aggregation?: {
        type: "horizontal" | "vertical" | "both";
        metrics: string[];
    } | null | undefined;
    params?: {
        name: string;
        description: string;
        aggregation: "sum" | "none" | "avg";
        unit: string;
    }[] | null | undefined;
    'if-version'?: string | null | undefined;
};
/**
 * Validates given `object` with given `schema`.
 */
export declare const validate: <T>(schema: ZodSchema<T, z.ZodTypeDef, T>, object: any, errorConstructor?: ErrorConstructor) => T;
