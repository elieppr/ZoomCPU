"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportCSVRaw = void 0;
const fs = __importStar(require("fs/promises"));
const errors_1 = require("../util/errors");
const { WriteFileError, CliInputError } = errors_1.ERRORS;
const ExportCSVRaw = () => {
    /**
     * handle a tree leaf, where there are no child nodes, by adding it as key->value pair to the flat map
     * and capturing key as a header
     */
    const handleLeafValue = (value, fullPath, key, flatMap, headers) => {
        if (fullPath.includes('outputs')) {
            headers.add(key);
            flatMap[fullPath] = value;
        }
    };
    /**
     * handle a tree node, recursively traverse the children and append their results to the flat map and captured headers
     */
    const handleNodeValue = (value, fullPath, flatMap, headers) => {
        const [subFlatMap, subHeaders] = extractFlatMapAndHeaders(value, fullPath);
        if (Object.keys(subFlatMap).length > 0) {
            Object.entries(subFlatMap).forEach(([subKey, value]) => {
                flatMap[subKey] = value;
            });
            subHeaders.forEach(subHeader => {
                headers.add(subHeader);
            });
        }
    };
    /**
     * Handles a key at the top level of the tree
     */
    const handleKey = (value, key, prefix, flatMap, headers) => {
        const fullPath = prefix ? `${prefix}.${key}` : key;
        if (value !== null && typeof value === 'object') {
            return handleNodeValue(value, fullPath, flatMap, headers);
        }
        return handleLeafValue(value, fullPath, key, flatMap, headers);
    };
    /**
     * Recursively extract a flat map and headers from the hierarcial tree.
     */
    const extractFlatMapAndHeaders = (tree, prefix = '') => {
        const headers = new Set();
        const flatMap = [];
        for (const key in tree) {
            if (key in tree) {
                handleKey(tree[key], key, prefix, flatMap, headers);
            }
        }
        return [flatMap, headers];
    };
    /**
     * extract the id of the key, that is removing the last token (which is the index).
     * in this manner, multiple keys that identical besides their index share the same id.
     */
    const extractIdHelper = (key) => {
        const parts = key.split('.');
        parts.pop();
        return parts.join('.');
    };
    /**
     * generate a CSV formatted string based on a flat key->value map, headers and ids
     */
    const getCsvString = (map, headers, ids) => {
        const csvRows = [];
        csvRows.push(['id', ...headers].join(','));
        ids.forEach(id => {
            const rowData = [id];
            headers.forEach(header => {
                const value = map[`${id}.${header}`] ?? '';
                rowData.push(value.toString());
            });
            csvRows.push(rowData.join(','));
        });
        return csvRows.join('\n');
    };
    /**
     * write the given string content to a file at the provided path
     */
    const writeOutputFile = async (content, outputPath) => {
        try {
            await fs.writeFile(`${outputPath}.csv`, content);
        }
        catch (error) {
            throw new WriteFileError(`Failed to write CSV to ${outputPath}: ${error}`);
        }
    };
    /**
     * export the provided tree content to a CSV file, represented in a flat structure
     */
    const execute = async (tree, _context, outputPath) => {
        if (!outputPath) {
            throw new CliInputError('Output path is required.');
        }
        const [extractredFlatMap, extractedHeaders] = extractFlatMapAndHeaders(tree);
        const ids = new Set(Object.keys(extractredFlatMap).map(key => extractIdHelper(key)));
        const csvString = getCsvString(extractredFlatMap, extractedHeaders, ids);
        writeOutputFile(csvString, outputPath);
    };
    return { execute };
};
exports.ExportCSVRaw = ExportCSVRaw;
//# sourceMappingURL=data:application/json;base64,