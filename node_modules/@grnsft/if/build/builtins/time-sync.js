"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSync = void 0;
const types_1 = require("node:util/types");
const luxon_1 = require("luxon");
const zod_1 = require("zod");
const parameterize_1 = require("../lib/parameterize");
const errors_1 = require("../util/errors");
const config_1 = require("../config");
const validations_1 = require("../util/validations");
const { InputValidationError } = errors_1.ERRORS;
const { INVALID_TIME_NORMALIZATION, INVALID_OBSERVATION_OVERLAP, AVOIDING_PADDING_BY_EDGES, } = config_1.STRINGS;
const TimeSync = (globalConfig) => {
    const metadata = {
        kind: 'execute',
    };
    /**
     * Take input array and return time-synchronized input array.
     */
    const execute = (inputs) => {
        const validatedConfig = validateGlobalConfig();
        const timeParams = {
            startTime: luxon_1.DateTime.fromISO(validatedConfig['start-time']),
            endTime: luxon_1.DateTime.fromISO(validatedConfig['end-time']),
            interval: validatedConfig.interval,
            allowPadding: validatedConfig['allow-padding'],
        };
        const pad = checkForPadding(inputs, timeParams);
        validatePadding(pad, timeParams);
        const paddedInputs = padInputs(inputs, pad, timeParams);
        const flattenInputs = paddedInputs.reduce((acc, input, index) => {
            const safeInput = Object.assign({}, input, validateInput(input, index));
            const currentMoment = parseDate(safeInput.timestamp);
            /** Checks if not the first input, then check consistency with previous ones. */
            if (index > 0) {
                const previousInput = paddedInputs[index - 1];
                const previousInputTimestamp = parseDate(previousInput.timestamp);
                /** Checks for timestamps overlap. */
                if (parseDate(previousInput.timestamp).plus({
                    seconds: previousInput.duration,
                }) > currentMoment) {
                    throw new InputValidationError(INVALID_OBSERVATION_OVERLAP);
                }
                const compareableTime = previousInputTimestamp.plus({
                    seconds: previousInput.duration,
                });
                const timelineGapSize = currentMoment
                    .diff(compareableTime)
                    .as('seconds');
                /** Checks if there is gap in timeline. */
                if (timelineGapSize > 1) {
                    acc.push(...getZeroishInputPerSecondBetweenRange(compareableTime, currentMoment, safeInput));
                }
            }
            /** Break down current observation. */
            for (let i = 0; i < safeInput.duration; i++) {
                const normalizedInput = breakDownInput(safeInput, i);
                acc.push(normalizedInput);
            }
            return trimInputsByGlobalTimeline(acc, timeParams);
        }, []);
        const sortedInputs = flattenInputs.sort((a, b) => parseDate(a.timestamp).diff(parseDate(b.timestamp)).as('seconds'));
        return resampleInputs(sortedInputs, timeParams);
    };
    const parseDate = (date) => {
        if (!date)
            return luxon_1.DateTime.invalid('Invalid date');
        // dates are passed to time-sync.ts both in ISO 8601 format
        // and as a Date object (from the deserialization of a YAML file)
        // if the YAML parser fails to identify as a date, it passes as a string
        if ((0, types_1.isDate)(date)) {
            return luxon_1.DateTime.fromJSDate(date);
        }
        if (typeof date === 'string') {
            return luxon_1.DateTime.fromISO(date);
        }
        throw new InputValidationError(`Unexpected date datatype: ${typeof date}: ${date}`);
    };
    /**
     * Validates input parameters.
     */
    const validateInput = (input, index) => {
        const schema = zod_1.z.object({
            timestamp: zod_1.z
                .string({
                required_error: `required in input[${index}]`,
            })
                .datetime({
                message: `invalid datetime in input[${index}]`,
            })
                .or(zod_1.z.date()),
            duration: zod_1.z.number(),
        });
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * Validates global config parameters.
     */
    const validateGlobalConfig = () => {
        if (globalConfig === undefined) {
            throw new InputValidationError(INVALID_TIME_NORMALIZATION);
        }
        const schema = zod_1.z
            .object({
            'start-time': zod_1.z.string().datetime(),
            'end-time': zod_1.z.string().datetime(),
            interval: zod_1.z.number(),
            'allow-padding': zod_1.z.boolean(),
        })
            .refine(data => data['start-time'] < data['end-time'], {
            message: '`start-time` should be lower than `end-time`',
        });
        return (0, validations_1.validate)(schema, globalConfig);
    };
    /**
     * Calculates minimal factor.
     */
    const convertPerInterval = (value, duration) => value / duration;
    /**
     * Normalize time per given second.
     */
    const normalizeTimePerSecond = (currentRoundMoment, i) => {
        const thisMoment = parseDate(currentRoundMoment).startOf('second');
        return thisMoment.plus({ seconds: i });
    };
    /**
     * Breaks down input per minimal time unit.
     */
    const breakDownInput = (input, i) => {
        const inputKeys = Object.keys(input);
        return inputKeys.reduce((acc, key) => {
            const method = parameterize_1.parameterize.getAggregationMethod(key);
            if (key === 'timestamp') {
                const perSecond = normalizeTimePerSecond(input.timestamp, i);
                acc[key] = perSecond.toUTC().toISO() ?? '';
                return acc;
            }
            /** @todo use user defined resolution later */
            if (key === 'duration') {
                acc[key] = 1;
                return acc;
            }
            acc[key] =
                method === 'sum'
                    ? convertPerInterval(input[key], input['duration'])
                    : input[key];
            return acc;
        }, {});
    };
    /**
     * Populates object to fill the gaps in observational timeline using zeroish values.
     */
    const fillWithZeroishInput = (input, missingTimestamp) => {
        const metrics = Object.keys(input);
        return metrics.reduce((acc, metric) => {
            if (metric === 'timestamp') {
                acc[metric] = missingTimestamp.startOf('second').toUTC().toISO() ?? '';
                return acc;
            }
            /** @todo later will be changed to user defined interval */
            if (metric === 'duration') {
                acc[metric] = 1;
                return acc;
            }
            if (metric === 'time-reserved') {
                acc[metric] = acc['duration'];
                return acc;
            }
            const method = parameterize_1.parameterize.getAggregationMethod(metric);
            if (method === 'avg' || method === 'sum') {
                acc[metric] = 0;
                return acc;
            }
            acc[metric] = input[metric];
            return acc;
        }, {});
    };
    /**
     * Checks if `error on padding` is enabled and padding is needed. If so, then throws error.
     */
    const validatePadding = (pad, params) => {
        const { start, end } = pad;
        const isPaddingNeeded = start || end;
        if (!params.allowPadding && isPaddingNeeded) {
            throw new InputValidationError(AVOIDING_PADDING_BY_EDGES(start, end));
        }
    };
    /**
     * Checks if padding is needed either at start of the timeline or the end and returns status.
     */
    const checkForPadding = (inputs, params) => {
        const startDiffInSeconds = parseDate(inputs[0].timestamp)
            .diff(params.startTime)
            .as('seconds');
        const lastInput = inputs[inputs.length - 1];
        const endDiffInSeconds = parseDate(lastInput.timestamp)
            .plus({ second: lastInput.duration })
            .diff(params.endTime)
            .as('seconds');
        return {
            start: startDiffInSeconds > 0,
            end: endDiffInSeconds < 0,
        };
    };
    /**
     * Iterates over given inputs frame, meanwhile checking if aggregation method is `sum`, then calculates it.
     * For methods is `avg` and `none` calculating average of the frame.
     */
    const resampleInputFrame = (inputsInTimeslot) => {
        return inputsInTimeslot.reduce((acc, input, index, inputs) => {
            const metrics = Object.keys(input);
            metrics.forEach(metric => {
                const method = parameterize_1.parameterize.getAggregationMethod(metric);
                acc[metric] = acc[metric] ?? 0;
                if (metric === 'timestamp') {
                    acc[metric] = inputs[0][metric];
                    return;
                }
                if (method === 'sum') {
                    acc[metric] += input[metric];
                    return;
                }
                if (method === 'none') {
                    acc[metric] = input[metric];
                    return;
                }
                /**
                 * If timeslot contains records more than one, then divide each metric by the timeslot length,
                 *  so that their sum yields the timeslot average.
                 */
                if (inputsInTimeslot.length > 1 &&
                    index === inputsInTimeslot.length - 1) {
                    acc[metric] /= inputsInTimeslot.length;
                    return;
                }
                acc[metric] += input[metric];
            });
            return acc;
        }, {});
    };
    /**
     * Takes each array frame with interval length, then aggregating them together as from units.yaml file.
     */
    const resampleInputs = (inputs, params) => {
        return inputs.reduce((acc, _input, index, inputs) => {
            const frameStart = index * params.interval;
            const frameEnd = (index + 1) * params.interval;
            const inputsFrame = inputs.slice(frameStart, frameEnd);
            const resampledInput = resampleInputFrame(inputsFrame);
            /** Checks if resampled input is not empty, then includes in result. */
            if (Object.keys(resampledInput).length > 0) {
                acc.push(resampledInput);
            }
            return acc;
        }, []);
    };
    /**
     * Pads zeroish inputs from the beginning or at the end of the inputs if needed.
     */
    const padInputs = (inputs, pad, params) => {
        const { start, end } = pad;
        const paddedFromBeginning = [];
        if (start) {
            paddedFromBeginning.push(...getZeroishInputPerSecondBetweenRange(params.startTime, parseDate(inputs[0].timestamp), inputs[0]));
        }
        const paddedArray = paddedFromBeginning.concat(inputs);
        if (end) {
            const lastInput = inputs[inputs.length - 1];
            const lastInputEnd = parseDate(lastInput.timestamp).plus({
                seconds: lastInput.duration,
            });
            paddedArray.push(...getZeroishInputPerSecondBetweenRange(lastInputEnd, params.endTime.plus({ seconds: 1 }), lastInput));
        }
        return paddedArray;
    };
    const getZeroishInputPerSecondBetweenRange = (startDate, endDate, templateInput) => {
        const array = [];
        const dateRange = luxon_1.Interval.fromDateTimes(startDate, endDate);
        for (const interval of dateRange.splitBy({ second: 1 })) {
            array.push(fillWithZeroishInput(templateInput, 
            // as far as I can tell, start will never be null
            // because if we pass an invalid start/endDate to
            // Interval, we get a zero length array as the range
            interval.start || luxon_1.DateTime.invalid('not expected - start is null')));
        }
        return array;
    };
    /*
     * Checks if input's timestamp is included in global specified period then leaves it, otherwise.
     */
    const trimInputsByGlobalTimeline = (inputs, params) => {
        return inputs.reduce((acc, item) => {
            const { timestamp } = item;
            if (parseDate(timestamp) >= params.startTime &&
                parseDate(timestamp) <= params.endTime) {
                acc.push(item);
            }
            return acc;
        }, []);
    };
    return { metadata, execute };
};
exports.TimeSync = TimeSync;
//# sourceMappingURL=data:application/json;base64,