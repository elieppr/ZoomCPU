"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WattTimeGridEmissions = void 0;
const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
const zod_1 = require("zod");
const errors_1 = require("../../util/errors");
const helpers_1 = require("../../util/helpers");
const validations_1 = require("../../util/validations");
const watt_time_api_1 = require("./watt-time-api");
dayjs.extend(utc);
dayjs.extend(timezone);
const { InputValidationError } = errors_1.ERRORS;
const WattTimeGridEmissions = (globalConfig) => {
    const metadata = { kind: 'execute' };
    const wattTimeAPI = (0, watt_time_api_1.WattTimeAPI)();
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.WattTimeGridEmissions.name);
    /**
     * Initialize authentication with global config.
     */
    const initializeAuthentication = async () => {
        validateConfig();
        await wattTimeAPI.authenticate();
    };
    /**
     * Calculates the average emission.
     */
    const execute = async (inputs) => {
        await initializeAuthentication();
        const wattTimeData = await getWattTimeData(inputs);
        return inputs.map(input => {
            const safeInput = Object.assign({}, input, validateInput(input));
            const inputStart = dayjs(safeInput.timestamp);
            const inputEnd = inputStart.add(safeInput.duration, 'seconds');
            const data = getWattTimeDataForDuration(wattTimeData, inputStart, inputEnd);
            const totalEmission = data.reduce((a, b) => a + b, 0);
            const result = totalEmission / data.length;
            return {
                ...input,
                'grid/carbon-intensity': result || 0,
            };
        });
    };
    /**
     * Validates input parameters.
     */
    const validateInput = (input) => {
        const schema = zod_1.z
            .object({
            duration: zod_1.z.number(),
            timestamp: zod_1.z.string(),
            geolocation: zod_1.z
                .string()
                .regex(new RegExp('^\\-?\\d{1,3}\\.\\d+,-?\\d{1,3}\\.\\d+$'), {
                message: 'not a comma-separated string consisting of `latitude` and `longitude`',
            })
                .optional(),
            'cloud/region-wt-id': zod_1.z.string().optional(),
            'cloud/region-geolocation': zod_1.z.string().optional(),
            'signal-type': zod_1.z.string().optional(),
        })
            .refine(data => {
            const { geolocation, 'cloud/region-wt-id': regionWtId, 'cloud/region-geolocation': regionGeolocation, } = data;
            return geolocation || regionWtId || regionGeolocation;
        }, {
            message: 'at least one of `geolocation`, `cloud/region-wt-id`, or `cloud/region-geolocation` parameters should be provided.',
        });
        if (input['cloud/region-geolocation']) {
            input.geolocation = input['cloud/region-geolocation'];
        }
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * lbs/MWh to Kg/MWh by dividing by 0.453592 (0.453592 Kg/lbs)
     * (Kg/MWh == g/kWh)
     * convert to kg/KWh by dividing by 1000. (1MWh = 1000KWh)
     * convert to g/KWh by multiplying by 1000. (1Kg = 1000g)
     * hence each other cancel out and g/KWh is the same as kg/MWh
     */
    const getWattTimeDataForDuration = (wattTimeData, inputStart, inputEnd) => {
        const kgMWh = 0.45359237;
        const formatedInputStart = dayjs.tz(inputStart, 'UTC').format();
        const formatedInputEnd = dayjs.tz(inputEnd, 'UTC').format();
        return wattTimeData.reduce((accumulator, data) => {
            /* WattTime API returns full data for the entire duration.
             * if the data point is before the input start, ignore it.
             * if the data point is after the input end, ignore it.
             * if the data point is exactly the same as the input end, ignore it
             */
            if (!dayjs(data.point_time).isBefore(formatedInputStart) &&
                !dayjs(data.point_time).isAfter(formatedInputEnd) &&
                dayjs(data.point_time).format() !== dayjs(formatedInputEnd).format()) {
                accumulator.push(data.value / kgMWh);
            }
            return accumulator;
        }, []);
    };
    /**
     * Parses the geolocation string from the input data to extract latitude and longitude.
     * Throws an InputValidationError if the geolocation string is invalid.
     */
    const parseLocation = (geolocation) => {
        const [latitude, longitude] = geolocation.split(',');
        return { latitude: parseFloat(latitude), longitude: parseFloat(longitude) };
    };
    /**
     * Retrieves data from the WattTime API based on the provided inputs.
     * Determines the start time and fetch duration from the inputs, and parses the geolocation.
     * Fetches data from the WattTime API for the entire duration and returns the sorted data.
     */
    const getWattTimeData = async (inputs) => {
        const { startTime, fetchDuration } = calculateStartDurationTime(inputs);
        const formatedStartTime = dayjs.tz(startTime, 'UTC').format();
        const formatEndTime = dayjs
            .tz(startTime, 'UTC')
            .add(fetchDuration, 'seconds')
            .format();
        if (inputs[0]['cloud/region-wt-id']) {
            const params = {
                start: formatedStartTime,
                end: formatEndTime,
                region: inputs[0]['cloud/region-wt-id'],
                signal_type: inputs[0]['signal-type'],
            };
            return await wattTimeAPI.fetchDataWithRegion(params);
        }
        const { latitude, longitude } = parseLocation(inputs[0].geolocation);
        const params = {
            latitude,
            longitude,
            starttime: formatedStartTime,
            endtime: formatEndTime,
        };
        return await wattTimeAPI.fetchAndSortData(params);
    };
    /**
     * Calculates the start time and fetch duration based on the provided inputs.
     * Iterates through the inputs to find the earliest start time and latest end time.
     * Calculates the fetch duration based on the time range.
     * Throws an InputValidationError if the fetch duration exceeds the maximum supported by the WattTime API.
     *
     */
    const calculateStartDurationTime = (inputs) => {
        const { startTime, endtime } = inputs.reduce((acc, input) => {
            const safeInput = validateInput(input);
            const { duration, timestamp } = safeInput;
            const dayjsTimestamp = dayjs.tz(timestamp, 'UTC');
            const startTime = dayjsTimestamp.isBefore(acc.startTime)
                ? dayjsTimestamp
                : acc.startTime;
            const durationInSeconds = dayjsTimestamp.add(duration, 'seconds');
            const endTime = durationInSeconds.isAfter(acc.endtime)
                ? durationInSeconds
                : acc.endtime;
            return { startTime: startTime, endtime: endTime };
        }, { startTime: inputs[0].timestamp, endtime: inputs[0].timestamp });
        const fetchDuration = endtime.diff(startTime, 'seconds');
        // WattTime API only supports up to 32 days
        if (fetchDuration > 32 * 24 * 60 * 60) {
            throw new InputValidationError(errorBuilder({
                message: `WattTime API supports up to 32 days. Duration of ${fetchDuration} seconds is too long`,
            }));
        }
        return { startTime: startTime, fetchDuration };
    };
    /**
     * Validates static parameters.
     */
    const validateConfig = () => {
        const WATT_TIME_USERNAME = process.env.WATT_TIME_USERNAME;
        const WATT_TIME_PASSWORD = process.env.WATT_TIME_PASSWORD;
        const schema = zod_1.z.object({
            WATT_TIME_USERNAME: zod_1.z.string({
                required_error: 'not provided in .env file of `IF` root directory',
            }),
            WATT_TIME_PASSWORD: zod_1.z.string().min(1, {
                message: 'not provided in .env file of `IF` root directory',
            }),
        });
        return (0, validations_1.validate)(schema, {
            ...(globalConfig || {}),
            WATT_TIME_USERNAME,
            WATT_TIME_PASSWORD,
        });
    };
    return {
        metadata,
        execute,
    };
};
exports.WattTimeGridEmissions = WattTimeGridEmissions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3dhdHQtdGltZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFDL0Isd0NBQXdDO0FBQ3hDLGtEQUFrRDtBQUNsRCw2QkFBc0I7QUFFdEIsOENBQXlDO0FBQ3pDLGdEQUFxRDtBQUlyRCx3REFBZ0Q7QUFHaEQsbURBQTRDO0FBRTVDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV2QixNQUFNLEVBQUMsb0JBQW9CLEVBQUMsR0FBRyxlQUFNLENBQUM7QUFFL0IsTUFBTSxxQkFBcUIsR0FBRyxDQUNuQyxZQUEyQixFQUNWLEVBQUU7SUFDbkIsTUFBTSxRQUFRLEdBQUcsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFDLENBQUM7SUFDbkMsTUFBTSxXQUFXLEdBQUcsSUFBQSwyQkFBVyxHQUFFLENBQUM7SUFDbEMsTUFBTSxZQUFZLEdBQUcsSUFBQSwyQkFBaUIsRUFBQyw2QkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuRTs7T0FFRztJQUNILE1BQU0sd0JBQXdCLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDMUMsY0FBYyxFQUFFLENBQUM7UUFFakIsTUFBTSxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsTUFBc0IsRUFBRSxFQUFFO1FBQy9DLE1BQU0sd0JBQXdCLEVBQUUsQ0FBQztRQUVqQyxNQUFNLFlBQVksR0FBRyxNQUFNLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxF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QyxNQUFNLENBQUM7WUFDdEIsa0JBQWtCLEVBQUUsT0FBQyxDQUFDLE1BQU0sQ0FBQztnQkFDM0IsY0FBYyxFQUFFLGtEQUFrRDthQUNuRSxDQUFDO1lBQ0Ysa0JBQWtCLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BDLE9BQU8sRUFBRSxrREFBa0Q7YUFDNUQsQ0FBQztTQUNILENBQUMsQ0FBQztRQUVILE9BQU8sSUFBQSxzQkFBUSxFQUF5QixNQUFNLEVBQUU7WUFDOUMsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUM7WUFDdkIsa0JBQWtCO1lBQ2xCLGtCQUFrQjtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsUUFBUTtRQUNSLE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBcFBXLFFBQUEscUJBQXFCLHlCQW9QaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgKiBhcyB1dGMgZnJvbSAnZGF5anMvcGx1Z2luL3V0Yyc7XG5pbXBvcnQgKiBhcyB0aW1lem9uZSBmcm9tICdkYXlqcy9wbHVnaW4vdGltZXpvbmUnO1xuaW1wb3J0IHt6fSBmcm9tICd6b2QnO1xuXG5pbXBvcnQge0VSUk9SU30gZnJvbSAnLi4vLi4vdXRpbC9lcnJvcnMnO1xuaW1wb3J0IHtidWlsZEVycm9yTWVzc2FnZX0gZnJvbSAnLi4vLi4vdXRpbC9oZWxwZXJzJztcblxuaW1wb3J0IHtDb25maWdQYXJhbXMsIEtleVZhbHVlUGFpciwgUGx1Z2luUGFyYW1zfSBmcm9tICcuLi8uLi90eXBlcy9jb21tb24nO1xuaW1wb3J0IHtQbHVnaW5JbnRlcmZhY2V9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHt2YWxpZGF0ZX0gZnJvbSAnLi4vLi4vdXRpbC92YWxpZGF0aW9ucyc7XG5cbmltcG9ydCB7V2F0dFRpbWVQYXJhbXMsIFdhdHRUaW1lUmVnaW9uUGFyYW1zfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7V2F0dFRpbWVBUEl9IGZyb20gJy4vd2F0dC10aW1lLWFwaSc7XG5cbmRheWpzLmV4dGVuZCh1dGMpO1xuZGF5anMuZXh0ZW5kKHRpbWV6b25lKTtcblxuY29uc3Qge0lucHV0VmFsaWRhdGlvbkVycm9yfSA9IEVSUk9SUztcblxuZXhwb3J0IGNvbnN0IFdhdHRUaW1lR3JpZEVtaXNzaW9ucyA9IChcbiAgZ2xvYmFsQ29uZmlnPzogQ29uZmlnUGFyYW1zXG4pOiBQbHVnaW5JbnRlcmZhY2UgPT4ge1xuICBjb25zdCBtZXRhZGF0YSA9IHtraW5kOiAnZXhlY3V0ZSd9O1xuICBjb25zdCB3YXR0VGltZUFQSSA9IFdhdHRUaW1lQVBJKCk7XG4gIGNvbnN0IGVycm9yQnVpbGRlciA9IGJ1aWxkRXJyb3JNZXNzYWdlKFdhdHRUaW1lR3JpZEVtaXNzaW9ucy5uYW1lKTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhdXRoZW50aWNhdGlvbiB3aXRoIGdsb2JhbCBjb25maWcuXG4gICAqL1xuICBjb25zdCBpbml0aWFsaXplQXV0aGVudGljYXRpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgdmFsaWRhdGVDb25maWcoKTtcblxuICAgIGF3YWl0IHdhdHRUaW1lQVBJLmF1dGhlbnRpY2F0ZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBhdmVyYWdlIGVtaXNzaW9uLlxuICAgKi9cbiAgY29uc3QgZXhlY3V0ZSA9IGFzeW5jIChpbnB1dHM6IFBsdWdpblBhcmFtc1tdKSA9PiB7XG4gICAgYXdhaXQgaW5pdGlhbGl6ZUF1dGhlbnRpY2F0aW9uKCk7XG5cbiAgICBjb25zdCB3YXR0VGltZURhdGEgPSBhd2FpdCBnZXRXYXR0VGltZURhdGEoaW5wdXRzKTtcblxuICAgIHJldHVybiBpbnB1dHMubWFwKGlucHV0ID0+IHtcbiAgICAgIGNvbnN0IHNhZmVJbnB1dCA9IE9iamVjdC5hc3NpZ24oe30sIGlucHV0LCB2YWxpZGF0ZUlucHV0KGlucHV0KSk7XG4gICAgICBjb25zdCBpbnB1dFN0YXJ0ID0gZGF5anMoc2FmZUlucHV0LnRpbWVzdGFtcCk7XG4gICAgICBjb25zdCBpbnB1dEVuZCA9IGlucHV0U3RhcnQuYWRkKHNhZmVJbnB1dC5kdXJhdGlvbiwgJ3NlY29uZHMnKTtcblxuICAgICAgY29uc3QgZGF0YSA9IGdldFdhdHRUaW1lRGF0YUZvckR1cmF0aW9uKFxuICAgICAgICB3YXR0VGltZURhdGEsXG4gICAgICAgIGlucHV0U3RhcnQsXG4gICAgICAgIGlucHV0RW5kXG4gICAgICApO1xuXG4gICAgICBjb25zdCB0b3RhbEVtaXNzaW9uID0gZGF0YS5yZWR1Y2UoKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiBhICsgYiwgMCk7XG4gICAgICBjb25zdCByZXN1bHQgPSB0b3RhbEVtaXNzaW9uIC8gZGF0YS5sZW5ndGg7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmlucHV0LFxuICAgICAgICAnZ3JpZC9jYXJib24taW50ZW5zaXR5JzogcmVzdWx0IHx8IDAsXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgaW5wdXQgcGFyYW1ldGVycy5cbiAgICovXG4gIGNvbnN0IHZhbGlkYXRlSW5wdXQgPSAoaW5wdXQ6IFBsdWdpblBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IHpcbiAgICAgIC5vYmplY3Qoe1xuICAgICAgICBkdXJhdGlvbjogei5udW1iZXIoKSxcbiAgICAgICAgdGltZXN0YW1wOiB6LnN0cmluZygpLFxuICAgICAgICBnZW9sb2NhdGlvbjogelxuICAgICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAgIC5yZWdleChuZXcgUmVnRXhwKCdeXFxcXC0/XFxcXGR7MSwzfVxcXFwuXFxcXGQrLC0/XFxcXGR7MSwzfVxcXFwuXFxcXGQrJCcpLCB7XG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAnbm90IGEgY29tbWEtc2VwYXJhdGVkIHN0cmluZyBjb25zaXN0aW5nIG9mIGBsYXRpdHVkZWAgYW5kIGBsb25naXR1ZGVgJyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb25hbCgpLFxuICAgICAgICAnY2xvdWQvcmVnaW9uLXd0LWlkJzogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICAnY2xvdWQvcmVnaW9uLWdlb2xvY2F0aW9uJzogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICAnc2lnbmFsLXR5cGUnOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICB9KVxuICAgICAgLnJlZmluZShcbiAgICAgICAgZGF0YSA9PiB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZ2VvbG9jYXRpb24sXG4gICAgICAgICAgICAnY2xvdWQvcmVnaW9uLXd0LWlkJzogcmVnaW9uV3RJZCxcbiAgICAgICAgICAgICdjbG91ZC9yZWdpb24tZ2VvbG9jYXRpb24nOiByZWdpb25HZW9sb2NhdGlvbixcbiAgICAgICAgICB9ID0gZGF0YTtcbiAgICAgICAgICByZXR1cm4gZ2VvbG9jYXRpb24gfHwgcmVnaW9uV3RJZCB8fCByZWdpb25HZW9sb2NhdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAnYXQgbGVhc3Qgb25lIG9mIGBnZW9sb2NhdGlvbmAsIGBjbG91ZC9yZWdpb24td3QtaWRgLCBvciBgY2xvdWQvcmVnaW9uLWdlb2xvY2F0aW9uYCBwYXJhbWV0ZXJzIHNob3VsZCBiZSBwcm92aWRlZC4nLFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgaWYgKGlucHV0WydjbG91ZC9yZWdpb24tZ2VvbG9jYXRpb24nXSkge1xuICAgICAgaW5wdXQuZ2VvbG9jYXRpb24gPSBpbnB1dFsnY2xvdWQvcmVnaW9uLWdlb2xvY2F0aW9uJ107XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlPHouaW5mZXI8dHlwZW9mIHNjaGVtYT4+KHNjaGVtYSwgaW5wdXQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBsYnMvTVdoIHRvIEtnL01XaCBieSBkaXZpZGluZyBieSAwLjQ1MzU5MiAoMC40NTM1OTIgS2cvbGJzKVxuICAgKiAoS2cvTVdoID09IGcva1doKVxuICAgKiBjb252ZXJ0IHRvIGtnL0tXaCBieSBkaXZpZGluZyBieSAxMDAwLiAoMU1XaCA9IDEwMDBLV2gpXG4gICAqIGNvbnZlcnQgdG8gZy9LV2ggYnkgbXVsdGlwbHlpbmcgYnkgMTAwMC4gKDFLZyA9IDEwMDBnKVxuICAgKiBoZW5jZSBlYWNoIG90aGVyIGNhbmNlbCBvdXQgYW5kIGcvS1doIGlzIHRoZSBzYW1lIGFzIGtnL01XaFxuICAgKi9cbiAgY29uc3QgZ2V0V2F0dFRpbWVEYXRhRm9yRHVyYXRpb24gPSAoXG4gICAgd2F0dFRpbWVEYXRhOiBLZXlWYWx1ZVBhaXJbXSxcbiAgICBpbnB1dFN0YXJ0OiBkYXlqcy5EYXlqcyxcbiAgICBpbnB1dEVuZDogZGF5anMuRGF5anNcbiAgKSA9PiB7XG4gICAgY29uc3Qga2dNV2ggPSAwLjQ1MzU5MjM3O1xuICAgIGNvbnN0IGZvcm1hdGVkSW5wdXRTdGFydCA9IGRheWpzLnR6KGlucHV0U3RhcnQsICdVVEMnKS5mb3JtYXQoKTtcbiAgICBjb25zdCBmb3JtYXRlZElucHV0RW5kID0gZGF5anMudHooaW5wdXRFbmQsICdVVEMnKS5mb3JtYXQoKTtcblxuICAgIHJldHVybiB3YXR0VGltZURhdGEucmVkdWNlKChhY2N1bXVsYXRvciwgZGF0YSkgPT4ge1xuICAgICAgLyogV2F0dFRpbWUgQVBJIHJldHVybnMgZnVsbCBkYXRhIGZvciB0aGUgZW50aXJlIGR1cmF0aW9uLlxuICAgICAgICogaWYgdGhlIGRhdGEgcG9pbnQgaXMgYmVmb3JlIHRoZSBpbnB1dCBzdGFydCwgaWdub3JlIGl0LlxuICAgICAgICogaWYgdGhlIGRhdGEgcG9pbnQgaXMgYWZ0ZXIgdGhlIGlucHV0IGVuZCwgaWdub3JlIGl0LlxuICAgICAgICogaWYgdGhlIGRhdGEgcG9pbnQgaXMgZXhhY3RseSB0aGUgc2FtZSBhcyB0aGUgaW5wdXQgZW5kLCBpZ25vcmUgaXRcbiAgICAgICAqL1xuICAgICAgaWYgKFxuICAgICAgICAhZGF5anMoZGF0YS5wb2ludF90aW1lKS5pc0JlZm9yZShmb3JtYXRlZElucHV0U3RhcnQpICYmXG4gICAgICAgICFkYXlqcyhkYXRhLnBvaW50X3RpbWUpLmlzQWZ0ZXIoZm9ybWF0ZWRJbnB1dEVuZCkgJiZcbiAgICAgICAgZGF5anMoZGF0YS5wb2ludF90aW1lKS5mb3JtYXQoKSAhPT0gZGF5anMoZm9ybWF0ZWRJbnB1dEVuZCkuZm9ybWF0KClcbiAgICAgICkge1xuICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGRhdGEudmFsdWUgLyBrZ01XaCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9LCBbXSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgZ2VvbG9jYXRpb24gc3RyaW5nIGZyb20gdGhlIGlucHV0IGRhdGEgdG8gZXh0cmFjdCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLlxuICAgKiBUaHJvd3MgYW4gSW5wdXRWYWxpZGF0aW9uRXJyb3IgaWYgdGhlIGdlb2xvY2F0aW9uIHN0cmluZyBpcyBpbnZhbGlkLlxuICAgKi9cbiAgY29uc3QgcGFyc2VMb2NhdGlvbiA9IChcbiAgICBnZW9sb2NhdGlvbjogc3RyaW5nXG4gICk6IHtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICB9ID0+IHtcbiAgICBjb25zdCBbbGF0aXR1ZGUsIGxvbmdpdHVkZV0gPSBnZW9sb2NhdGlvbi5zcGxpdCgnLCcpO1xuXG4gICAgcmV0dXJuIHtsYXRpdHVkZTogcGFyc2VGbG9hdChsYXRpdHVkZSksIGxvbmdpdHVkZTogcGFyc2VGbG9hdChsb25naXR1ZGUpfTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIGRhdGEgZnJvbSB0aGUgV2F0dFRpbWUgQVBJIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBpbnB1dHMuXG4gICAqIERldGVybWluZXMgdGhlIHN0YXJ0IHRpbWUgYW5kIGZldGNoIGR1cmF0aW9uIGZyb20gdGhlIGlucHV0cywgYW5kIHBhcnNlcyB0aGUgZ2VvbG9jYXRpb24uXG4gICAqIEZldGNoZXMgZGF0YSBmcm9tIHRoZSBXYXR0VGltZSBBUEkgZm9yIHRoZSBlbnRpcmUgZHVyYXRpb24gYW5kIHJldHVybnMgdGhlIHNvcnRlZCBkYXRhLlxuICAgKi9cbiAgY29uc3QgZ2V0V2F0dFRpbWVEYXRhID0gYXN5bmMgKGlucHV0czogUGx1Z2luUGFyYW1zW10pID0+IHtcbiAgICBjb25zdCB7c3RhcnRUaW1lLCBmZXRjaER1cmF0aW9ufSA9IGNhbGN1bGF0ZVN0YXJ0RHVyYXRpb25UaW1lKGlucHV0cyk7XG5cbiAgICBjb25zdCBmb3JtYXRlZFN0YXJ0VGltZSA9IGRheWpzLnR6KHN0YXJ0VGltZSwgJ1VUQycpLmZvcm1hdCgpO1xuICAgIGNvbnN0IGZvcm1hdEVuZFRpbWUgPSBkYXlqc1xuICAgICAgLnR6KHN0YXJ0VGltZSwgJ1VUQycpXG4gICAgICAuYWRkKGZldGNoRHVyYXRpb24sICdzZWNvbmRzJylcbiAgICAgIC5mb3JtYXQoKTtcblxuICAgIGlmIChpbnB1dHNbMF1bJ2Nsb3VkL3JlZ2lvbi13dC1pZCddKSB7XG4gICAgICBjb25zdCBwYXJhbXM6IFdhdHRUaW1lUmVnaW9uUGFyYW1zID0ge1xuICAgICAgICBzdGFydDogZm9ybWF0ZWRTdGFydFRpbWUsXG4gICAgICAgIGVuZDogZm9ybWF0RW5kVGltZSxcbiAgICAgICAgcmVnaW9uOiBpbnB1dHNbMF1bJ2Nsb3VkL3JlZ2lvbi13dC1pZCddLFxuICAgICAgICBzaWduYWxfdHlwZTogaW5wdXRzWzBdWydzaWduYWwtdHlwZSddLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGF3YWl0IHdhdHRUaW1lQVBJLmZldGNoRGF0YVdpdGhSZWdpb24ocGFyYW1zKTtcbiAgICB9XG5cbiAgICBjb25zdCB7bGF0aXR1ZGUsIGxvbmdpdHVkZX0gPSBwYXJzZUxvY2F0aW9uKGlucHV0c1swXS5nZW9sb2NhdGlvbik7XG5cbiAgICBjb25zdCBwYXJhbXM6IFdhdHRUaW1lUGFyYW1zID0ge1xuICAgICAgbGF0aXR1ZGUsXG4gICAgICBsb25naXR1ZGUsXG4gICAgICBzdGFydHRpbWU6IGZvcm1hdGVkU3RhcnRUaW1lLFxuICAgICAgZW5kdGltZTogZm9ybWF0RW5kVGltZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGF3YWl0IHdhdHRUaW1lQVBJLmZldGNoQW5kU29ydERhdGEocGFyYW1zKTtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgc3RhcnQgdGltZSBhbmQgZmV0Y2ggZHVyYXRpb24gYmFzZWQgb24gdGhlIHByb3ZpZGVkIGlucHV0cy5cbiAgICogSXRlcmF0ZXMgdGhyb3VnaCB0aGUgaW5wdXRzIHRvIGZpbmQgdGhlIGVhcmxpZXN0IHN0YXJ0IHRpbWUgYW5kIGxhdGVzdCBlbmQgdGltZS5cbiAgICogQ2FsY3VsYXRlcyB0aGUgZmV0Y2ggZHVyYXRpb24gYmFzZWQgb24gdGhlIHRpbWUgcmFuZ2UuXG4gICAqIFRocm93cyBhbiBJbnB1dFZhbGlkYXRpb25FcnJvciBpZiB0aGUgZmV0Y2ggZHVyYXRpb24gZXhjZWVkcyB0aGUgbWF4aW11bSBzdXBwb3J0ZWQgYnkgdGhlIFdhdHRUaW1lIEFQSS5cbiAgICpcbiAgICovXG4gIGNvbnN0IGNhbGN1bGF0ZVN0YXJ0RHVyYXRpb25UaW1lID0gKFxuICAgIGlucHV0czogUGx1Z2luUGFyYW1zW11cbiAgKToge1xuICAgIHN0YXJ0VGltZTogZGF5anMuRGF5anM7XG4gICAgZmV0Y2hEdXJhdGlvbjogbnVtYmVyO1xuICB9ID0+IHtcbiAgICBjb25zdCB7c3RhcnRUaW1lLCBlbmR0aW1lfSA9IGlucHV0cy5yZWR1Y2UoXG4gICAgICAoYWNjLCBpbnB1dCkgPT4ge1xuICAgICAgICBjb25zdCBzYWZlSW5wdXQgPSB2YWxpZGF0ZUlucHV0KGlucHV0KTtcbiAgICAgICAgY29uc3Qge2R1cmF0aW9uLCB0aW1lc3RhbXB9ID0gc2FmZUlucHV0O1xuICAgICAgICBjb25zdCBkYXlqc1RpbWVzdGFtcCA9IGRheWpzLnR6KHRpbWVzdGFtcCwgJ1VUQycpO1xuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBkYXlqc1RpbWVzdGFtcC5pc0JlZm9yZShhY2Muc3RhcnRUaW1lKVxuICAgICAgICAgID8gZGF5anNUaW1lc3RhbXBcbiAgICAgICAgICA6IGFjYy5zdGFydFRpbWU7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uSW5TZWNvbmRzID0gZGF5anNUaW1lc3RhbXAuYWRkKGR1cmF0aW9uLCAnc2Vjb25kcycpO1xuICAgICAgICBjb25zdCBlbmRUaW1lID0gZHVyYXRpb25JblNlY29uZHMuaXNBZnRlcihhY2MuZW5kdGltZSlcbiAgICAgICAgICA/IGR1cmF0aW9uSW5TZWNvbmRzXG4gICAgICAgICAgOiBhY2MuZW5kdGltZTtcblxuICAgICAgICByZXR1cm4ge3N0YXJ0VGltZTogc3RhcnRUaW1lLCBlbmR0aW1lOiBlbmRUaW1lfTtcbiAgICAgIH0sXG4gICAgICB7c3RhcnRUaW1lOiBpbnB1dHNbMF0udGltZXN0YW1wLCBlbmR0aW1lOiBpbnB1dHNbMF0udGltZXN0YW1wfVxuICAgICk7XG5cbiAgICBjb25zdCBmZXRjaER1cmF0aW9uID0gZW5kdGltZS5kaWZmKHN0YXJ0VGltZSwgJ3NlY29uZHMnKTtcblxuICAgIC8vIFdhdHRUaW1lIEFQSSBvbmx5IHN1cHBvcnRzIHVwIHRvIDMyIGRheXNcbiAgICBpZiAoZmV0Y2hEdXJhdGlvbiA+IDMyICogMjQgKiA2MCAqIDYwKSB7XG4gICAgICB0aHJvdyBuZXcgSW5wdXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgIGVycm9yQnVpbGRlcih7XG4gICAgICAgICAgbWVzc2FnZTogYFdhdHRUaW1lIEFQSSBzdXBwb3J0cyB1cCB0byAzMiBkYXlzLiBEdXJhdGlvbiBvZiAke2ZldGNoRHVyYXRpb259IHNlY29uZHMgaXMgdG9vIGxvbmdgLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge3N0YXJ0VGltZTogc3RhcnRUaW1lLCBmZXRjaER1cmF0aW9ufTtcbiAgfTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHN0YXRpYyBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgY29uc3QgdmFsaWRhdGVDb25maWcgPSAoKSA9PiB7XG4gICAgY29uc3QgV0FUVF9USU1FX1VTRVJOQU1FID0gcHJvY2Vzcy5lbnYuV0FUVF9USU1FX1VTRVJOQU1FO1xuICAgIGNvbnN0IFdBVFRfVElNRV9QQVNTV09SRCA9IHByb2Nlc3MuZW52LldBVFRfVElNRV9QQVNTV09SRDtcblxuICAgIGNvbnN0IHNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAgIFdBVFRfVElNRV9VU0VSTkFNRTogei5zdHJpbmcoe1xuICAgICAgICByZXF1aXJlZF9lcnJvcjogJ25vdCBwcm92aWRlZCBpbiAuZW52IGZpbGUgb2YgYElGYCByb290IGRpcmVjdG9yeScsXG4gICAgICB9KSxcbiAgICAgIFdBVFRfVElNRV9QQVNTV09SRDogei5zdHJpbmcoKS5taW4oMSwge1xuICAgICAgICBtZXNzYWdlOiAnbm90IHByb3ZpZGVkIGluIC5lbnYgZmlsZSBvZiBgSUZgIHJvb3QgZGlyZWN0b3J5JyxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhbGlkYXRlPHouaW5mZXI8dHlwZW9mIHNjaGVtYT4+KHNjaGVtYSwge1xuICAgICAgLi4uKGdsb2JhbENvbmZpZyB8fCB7fSksXG4gICAgICBXQVRUX1RJTUVfVVNFUk5BTUUsXG4gICAgICBXQVRUX1RJTUVfUEFTU1dPUkQsXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBtZXRhZGF0YSxcbiAgICBleGVjdXRlLFxuICB9O1xufTtcbiJdfQ==