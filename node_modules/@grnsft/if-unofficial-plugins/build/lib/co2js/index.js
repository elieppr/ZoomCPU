"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Co2js = void 0;
const co2_1 = require("@tgwf/co2");
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const { InputValidationError } = errors_1.ERRORS;
const Co2js = (globalConfig) => {
    const metadata = { kind: 'execute' };
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.Co2js.name);
    /**
     * Executes the plugin for a list of input parameters.
     */
    const execute = async (inputs, config) => {
        const mergedValidatedConfig = Object.assign({}, validateConfig(config), validateGlobalConfig());
        const model = new co2_1.co2({ model: mergedValidatedConfig.type });
        return inputs.map(input => {
            const mergedWithConfig = Object.assign({}, validateInput(input), mergedValidatedConfig);
            const result = calculateResultByParams(mergedWithConfig, model);
            return result
                ? {
                    ...input,
                    'carbon-operational': result,
                }
                : input;
        });
    };
    /**
     * Calculates a result based on the provided static parameters type.
     */
    const calculateResultByParams = (inputWithConfig, model) => {
        const greenhosting = inputWithConfig['green-web-host'] === true;
        const options = inputWithConfig['options'];
        const GBinBytes = inputWithConfig['network/data'] * 1000 * 1000 * 1000;
        const bytes = inputWithConfig['network/data/bytes'] || GBinBytes;
        const paramType = {
            swd: () => {
                return options
                    ? model.perVisitTrace(bytes, greenhosting, options).co2
                    : model.perVisit(bytes, greenhosting);
            },
            '1byte': () => {
                return model.perByte(bytes, greenhosting);
            },
        };
        return paramType[inputWithConfig.type]();
    };
    /**
     * Validates input parameters.
     */
    const validateInput = (input) => {
        const schema = zod_1.z
            .object({
            'network/data/bytes': zod_1.z.number(),
            'network/data': zod_1.z.number(),
        })
            .partial()
            .refine(data => !!data['network/data/bytes'] || !!data['network/data'], {
            message: 'Either `network/data/bytes` or `network/data` should be provided in the input.',
        });
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * Validates Global config parameters.
     */
    const validateGlobalConfig = () => {
        const schema = zod_1.z.object({
            options: zod_1.z
                .object({
                dataReloadRatio: zod_1.z.number().min(0).max(1).optional(),
                firstVisitPercentage: zod_1.z.number().min(0).max(1).optional(),
                returnVisitPercentage: zod_1.z.number().min(0).max(1).optional(),
                gridIntensity: zod_1.z
                    .object({
                    device: zod_1.z
                        .number()
                        .or(zod_1.z.object({ country: zod_1.z.string() }))
                        .optional(),
                    dataCenter: zod_1.z
                        .number()
                        .or(zod_1.z.object({ country: zod_1.z.string() }))
                        .optional(),
                    networks: zod_1.z
                        .number()
                        .or(zod_1.z.object({ country: zod_1.z.string() }))
                        .optional(),
                })
                    .optional(),
            })
                .optional(),
        });
        return (0, validations_1.validate)(schema, globalConfig || {});
    };
    /**
     * Validates node config parameters.
     */
    const validateConfig = (config) => {
        if (!config) {
            throw new InputValidationError(errorBuilder({
                message: 'Config is not provided',
            }));
        }
        const schema = zod_1.z
            .object({
            type: zod_1.z.enum(['1byte', 'swd']),
            'green-web-host': zod_1.z.boolean(),
        })
            .refine(validations_1.allDefined, {
            message: '`type` and `green-web-host` are not provided in node config',
        });
        return (0, validations_1.validate)(schema, config);
    };
    return {
        metadata,
        execute,
    };
};
exports.Co2js = Co2js;
//# sourceMappingURL=data:application/json;base64,