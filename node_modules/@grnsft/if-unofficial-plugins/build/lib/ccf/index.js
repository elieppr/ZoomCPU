"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudCarbonFootprint = void 0;
const AWSInstanceTypes_1 = require("@cloud-carbon-footprint/aws/dist/lib/AWSInstanceTypes");
const typescript_cubic_spline_1 = require("typescript-cubic-spline");
const zod_1 = require("zod");
const common_1 = require("../../types/common");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const AWS_INSTANCES = require("./aws-instances.json");
const GCP_INSTANCES = require("./gcp-instances.json");
const AZURE_INSTANCES = require("./azure-instances.json");
const GCP_USE = require("./gcp-use.json");
const AWS_USE = require("./aws-use.json");
const AZURE_USE = require("./azure-use.json");
const GCP_EMBODIED = require("./gcp-embodied.json");
const AWS_EMBODIED = require("./aws-embodied.json");
const AZURE_EMBODIED = require("./azure-embodied.json");
const { UnsupportedValueError } = errors_1.ERRORS;
const CloudCarbonFootprint = (globalConfig) => {
    const metadata = { kind: 'execute' };
    const computeInstances = {};
    const instanceUsage = {
        gcp: {},
        aws: {},
        azure: {},
    };
    const SUPPORTED_VENDORS = ['aws', 'gcp', 'azure'];
    const deafultExpectedLifespan = 4;
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.CloudCarbonFootprint.name);
    /**
     * Calculate the total emissions for inputs.
     */
    const execute = async (inputs) => {
        standardizeInstanceMetrics();
        return inputs.map(input => {
            const mergedWithConfig = Object.assign({}, input, globalConfig);
            const validatedInputWithConfig = Object.assign({}, { interpolation: mergedWithConfig.interpolation || common_1.Interpolation.LINEAR }, validateInputWithConfig(mergedWithConfig));
            return {
                ...input,
                energy: calculateEnergy(validatedInputWithConfig),
                'carbon-embodied': embodiedEmissions(validatedInputWithConfig),
            };
        });
    };
    /**
     * Validates the interpolation method for AWS cloud/vendor.
     */
    const validateInterpolationForAws = (interpolation, cloudVendor) => {
        if (interpolation && cloudVendor !== 'aws') {
            throw new UnsupportedValueError(errorBuilder({
                message: `Interpolation ${interpolation} method is not supported`,
            }));
        }
        return true;
    };
    /**
     * Validates the instance type for a specified cloud/vendor.
     */
    const validateInstanceTypeForVendor = (instanceType, cloudVendor) => {
        if (!(instanceType in computeInstances[cloudVendor])) {
            throw new UnsupportedValueError(errorBuilder({
                message: `Instance type ${instanceType} is not supported`,
            }));
        }
        return true;
    };
    /**
     * Validates single input fields.
     */
    const validateInputWithConfig = (params) => {
        const errorMessageForVendor = `Only ${SUPPORTED_VENDORS} is currently supported`;
        const errorMessageForInterpolation = `Only ${common_1.Interpolation} is currently supported`;
        const schema = zod_1.z
            .object({
            duration: zod_1.z.number(),
            'cpu/utilization': zod_1.z.number(),
            'cloud/instance-type': zod_1.z.string(),
            'cloud/vendor': zod_1.z.enum(SUPPORTED_VENDORS, {
                required_error: errorMessageForVendor,
            }),
            'cpu/expected-lifespan': zod_1.z.number().optional(),
            interpolation: zod_1.z
                .nativeEnum(common_1.Interpolation, {
                required_error: errorMessageForInterpolation,
            })
                .optional(),
        })
            .refine(param => {
            validateInterpolationForAws(param.interpolation, param['cloud/vendor']);
            validateInstanceTypeForVendor(param['cloud/instance-type'], param['cloud/vendor']);
            return true;
        }, {
            message: '`duration`, `cpu/utilization`, `cloud/instance-type`, and `cloud/vendor` should be present in the input',
        });
        return (0, validations_1.validate)(schema, params);
    };
    /**
     * Calculates the energy consumption for a single input
     * (wattage * duration) / (seconds in an hour) / 1000 = kWh
     */
    const calculateEnergy = (input) => {
        const { duration, 'cpu/utilization': cpu, 'cloud/instance-type': instanceType, 'cloud/vendor': cloudVendor, } = input;
        const wattage = cloudVendor === 'aws' && input.interpolation === 'spline'
            ? getAWSSplineWattage(cpu, instanceType)
            : getLinerInterpolationWattage(cpu, input);
        return (wattage * duration) / 3600 / 1000;
    };
    /**
     * Uses a spline method for AWS to get wattages.
     */
    const getAWSSplineWattage = (cpu, instanceType) => {
        const consumption = computeInstances['aws'][instanceType].consumption;
        const x = [0, 10, 50, 100];
        const y = [
            consumption.idle,
            consumption.tenPercent,
            consumption.fiftyPercent,
            consumption.hundredPercent,
        ];
        const spline = new typescript_cubic_spline_1.default(x, y);
        return spline.at(cpu);
    };
    /**
     *  Gets Liner interpolation wattages for GCP and Azure.
     */
    const getLinerInterpolationWattage = (cpu, input) => {
        const { 'cloud/vendor': cloudVendor, 'cloud/instance-type': instanceType } = input;
        const idle = computeInstances[cloudVendor][instanceType].consumption.minWatts;
        const max = computeInstances[cloudVendor][instanceType].consumption.maxWatts;
        return idle + (max - idle) * (cpu / 100);
    };
    /**
     * Standardize the instance metrics for all the vendors.
     * Maps the instance metrics to a standard format (min, max, idle, 10%, 50%, 100%) for all the vendors.
     */
    const standardizeInstanceMetrics = () => {
        initializeComputeInstances();
        calculateAverage('gcp', GCP_USE);
        calculateAverage('azure', AZURE_USE);
        calculateAverage('aws', AWS_USE);
        processInstances(AWS_INSTANCES, 'aws', 'Instance type', 'Platform Total Number of vCPU');
        processInstances(GCP_INSTANCES, 'gcp', 'Machine type', 'Platform vCPUs (highest vCPU possible)');
        processInstances(AZURE_INSTANCES, 'azure', 'Virtual Machine', 'Platform vCPUs (highest vCPU possible)');
        processEmbodiedEmissions(AWS_EMBODIED, 'aws');
        processEmbodiedEmissions(GCP_EMBODIED, 'gcp');
        processEmbodiedEmissions(AZURE_EMBODIED, 'azure');
    };
    /**
     * Initializes instances.
     */
    const initializeComputeInstances = () => {
        computeInstances['aws'] = {};
        computeInstances['gcp'] = {};
        computeInstances['azure'] = {};
    };
    /**
     * Calculates average of all instances.
     */
    const calculateAverage = (cloudVendor, instanceList) => {
        const { totalMin, totalMax, count } = instanceList.reduce((accumulator, instance) => {
            instanceUsage[cloudVendor][instance['Architecture']] = instance;
            accumulator.totalMin += parseFloat(instance['Min Watts']);
            accumulator.totalMax += parseFloat(instance['Max Watts']);
            accumulator.count += 1.0;
            return accumulator;
        }, { totalMin: 0.0, totalMax: 0.0, count: 0.0 });
        instanceUsage[cloudVendor]['Average'] = {
            'Min Watts': totalMin / count,
            'Max Watts': totalMax / count,
            Architecture: 'Average',
        };
    };
    /**
     * Resolves differences in AWS instance architecture strings.
     * Modifies the input architecture string based on predefined rules.
     * Validates the resolved architecture using the validateAwsArchitecture method.
     */
    const resolveAwsArchitecture = (architecture) => {
        const modifyArchitecture = {
            'AMD ': () => {
                architecture = architecture.substring(4);
            },
            Skylake: () => {
                architecture = 'Sky Lake';
            },
            Graviton: () => {
                architecture = architecture.includes('2') ? 'Graviton2' : 'Graviton';
            },
            Unknown: () => {
                architecture = 'Average';
            },
        };
        Object.keys(modifyArchitecture).forEach(key => {
            if (architecture.includes(key)) {
                modifyArchitecture[key]();
            }
        });
        validateAwsArchitecture(architecture);
        return architecture;
    };
    /**
     * Validates the AWS instance architecture against a predefined set of supported architectures.
     */
    const validateAwsArchitecture = (architecture) => {
        if (!(architecture in instanceUsage['aws'])) {
            throw new UnsupportedValueError(errorBuilder({
                message: `Architecture '${architecture}' is not supported`,
            }));
        }
    };
    /**
     * Calculates the embodied emissions for a given input.
     * Multiply totalEmissions by 1000 to convert from kgCO2e to gCO2e
     * M = TE * (TR/EL) * (RR/TR)
     * Where:
     * TE = Total Embodied Emissions, the sum of Life Cycle Assessment(LCA) emissions for all hardware components
     * TR = Time Reserved, the length of time the hardware is reserved for use by the software
     * EL = Expected Lifespan, the anticipated time that the equipment will be installed
     * RR = Resources Reserved, the number of resources reserved for use by the software.
     * TR = Total Resources, the total number of resources available.
     */
    const embodiedEmissions = (input) => {
        const { 'cloud/vendor': cloudVendor, 'cloud/instance-type': instanceType, 'cpu/expected-lifespan': expectedLifespan, duration, } = input;
        const durationInHours = duration / 3600;
        const instance = computeInstances[cloudVendor][instanceType];
        const totalEmissions = instance.embodiedEmission;
        const expectedLifespanInHours = 8760 * (expectedLifespan || deafultExpectedLifespan);
        const reservedResources = instance.vCPUs;
        const totalResources = instance.maxvCPUs;
        return (totalEmissions *
            1000 *
            (durationInHours / expectedLifespanInHours) *
            (reservedResources / totalResources));
    };
    /**
     * Processes a list of instances, calculates their consumption, and stores the standardized information in the computeInstances object.
     */
    const processInstances = (instances, cloudVendor, type, maxvCPUs) => {
        instances.forEach((instance) => {
            const vCPU = cloudVendor === 'aws' ? 'Instance vCPU' : 'Instance vCPUs';
            const cpus = parseInt(instance[vCPU], 10);
            const consumption = cloudVendor === 'aws'
                ? calculateAwsConsumption(instance, cpus)
                : calculateConsumption(instance, cloudVendor, cpus);
            computeInstances[cloudVendor][instance[type]] = {
                name: instance[type],
                vCPUs: cpus,
                consumption,
                maxvCPUs: parseInt(instance[maxvCPUs], 10),
            };
        });
    };
    /**
     * Retrieves the list of architectures for a given instance based on the INSTANCE_TYPE_COMPUTE_PROCESSOR_MAPPING.
     */
    const getInstanceArchitectures = (instance) => {
        const architectures = AWSInstanceTypes_1.INSTANCE_TYPE_COMPUTE_PROCESSOR_MAPPING[instance['Instance type']] ?? ['Average'];
        return architectures.map((architecture) => resolveAwsArchitecture(architecture));
    };
    /**
     * Calculates the average minimum and maximum watts consumption for AWS instances based on the provided architectures.
     */
    const calculateAwsAverageWatts = (architectures) => {
        const awsInstance = instanceUsage['aws'];
        const { minWatts, maxWatts, count } = architectures.reduce((accumulator, architecture) => {
            accumulator.minWatts += awsInstance[architecture]['Min Watts'];
            accumulator.maxWatts += awsInstance[architecture]['Max Watts'];
            accumulator.count += 1;
            return accumulator;
        }, { minWatts: 0.0, maxWatts: 0.0, count: 0 });
        return {
            minWatts: minWatts / count,
            maxWatts: maxWatts / count,
        };
    };
    /**
     * Calculates the consumption metrics (idle, 10%, 50%, 100%, minWatts, maxWatts) for a given compute instance.cv
     */
    const calculateConsumption = (instance, cloudVendor, cpus) => {
        const architecture = instance['Microarchitecture'] in instanceUsage[cloudVendor]
            ? instance['Microarchitecture']
            : 'Average';
        return {
            idle: 0,
            tenPercent: 0,
            fiftyPercent: 0,
            hundredPercent: 0,
            minWatts: instanceUsage[cloudVendor][architecture]['Min Watts'] * cpus,
            maxWatts: instanceUsage[cloudVendor][architecture]['Max Watts'] * cpus,
        };
    };
    /**
     * Calculates the consumption metrics (idle, 10%, 50%, 100%, minWatts, maxWatts) for a given compute instance.
     */
    const calculateAwsConsumption = (instance, cpus) => {
        const architectures = getInstanceArchitectures(instance);
        const { minWatts, maxWatts } = calculateAwsAverageWatts(architectures);
        return {
            idle: getParsedInstanceMetric(instance['Instance @ Idle']),
            tenPercent: getParsedInstanceMetric(instance['Instance @ 10%']),
            fiftyPercent: getParsedInstanceMetric(instance['Instance @ 50%']),
            hundredPercent: getParsedInstanceMetric(instance['Instance @ 100%']),
            minWatts: minWatts * cpus,
            maxWatts: maxWatts * cpus,
        };
    };
    /**
     * Parses a metric value to a floating-point number.
     */
    const getParsedInstanceMetric = (metric) => {
        return parseFloat(metric.replace(',', '.'));
    };
    /**
     * Processes and assigns embodied emissions data to compute instances for a specific cloud/vendor.
     */
    const processEmbodiedEmissions = (embodiedList, cloudVendor) => {
        embodiedList.forEach((instance) => {
            computeInstances[cloudVendor][instance['type']].embodiedEmission =
                instance['total'];
        });
    };
    return {
        metadata,
        execute,
    };
};
exports.CloudCarbonFootprint = CloudCarbonFootprint;
//# sourceMappingURL=data:application/json;base64,