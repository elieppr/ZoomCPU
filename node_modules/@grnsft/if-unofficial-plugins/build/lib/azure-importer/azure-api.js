"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureAPI = void 0;
const arm_monitor_1 = require("@azure/arm-monitor");
const identity_1 = require("@azure/identity");
const arm_compute_1 = require("@azure/arm-compute");
class AzureAPI {
    constructor() {
        this.credential = new identity_1.DefaultAzureCredential();
    }
    /**
     * Fetches metrics for a specific virtual machine.
     */
    async getMetricsTimeseries(params, metricName) {
        const { subscriptionId, resourceGroupName, timespan, interval, aggregation, vmName, } = params;
        this.setClient(subscriptionId);
        const monitorClient = new arm_monitor_1.MonitorClient(this.credential, subscriptionId);
        const response = await monitorClient.metrics.list(`subscriptions/${subscriptionId}/resourceGroups/${resourceGroupName}/providers/Microsoft.Compute/virtualMachines/${vmName}`, {
            metricnames: metricName,
            timespan,
            interval,
            aggregation,
        });
        return (response.value[0].timeseries || [])
            .map(series => series.data || [])
            .flat();
    }
    /**
     * Sets up the ComputeManagementClient with the specified subscription ID.
     */
    setClient(subscriptionId) {
        this.client = new arm_compute_1.ComputeManagementClient(this.credential, subscriptionId);
    }
    /**
     * Fetches a list of virtual machines within a specific resource group.
     */
    async getVMDataByResourceGroupName(resourceGroupName) {
        const vmData = [];
        const vmList = this.client.virtualMachines.list(resourceGroupName);
        for await (const item of vmList) {
            vmData.push(item);
        }
        return vmData;
    }
    /**
     * Fetches a list of available resource Skus.
     */
    async getResourceSkus() {
        const iterator = this.client.resourceSkus.list();
        const resourceSkus = [];
        for await (const resourceSku of iterator) {
            resourceSkus.push(resourceSku);
        }
        return resourceSkus;
    }
}
exports.AzureAPI = AzureAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXp1cmUtYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9henVyZS1pbXBvcnRlci9henVyZS1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQWlEO0FBQ2pELDhDQUF1RDtBQUN2RCxvREFJNEI7QUFJNUIsTUFBYSxRQUFRO0lBSW5CO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGlDQUFzQixFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLG9CQUFvQixDQUMvQixNQUF3QixFQUN4QixVQUFrQjtRQUVsQixNQUFNLEVBQ0osY0FBYyxFQUNkLGlCQUFpQixFQUNqQixRQUFRLEVBQ1IsUUFBUSxFQUNSLFdBQVcsRUFDWCxNQUFNLEdBQ1AsR0FBRyxNQUFNLENBQUM7UUFFWCxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRS9CLE1BQU0sYUFBYSxHQUFHLElBQUksMkJBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sUUFBUSxHQUFHLE1BQU0sYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQy9DLGlCQUFpQixjQUFjLG1CQUFtQixpQkFBaUIsZ0RBQWdELE1BQU0sRUFBRSxFQUMzSDtZQUNFLFdBQVcsRUFBRSxVQUFVO1lBQ3ZCLFFBQVE7WUFDUixRQUFRO1lBQ1IsV0FBVztTQUNaLENBQ0YsQ0FBQztRQUVGLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7YUFDeEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7YUFDaEMsSUFBSSxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQ7O09BRUc7SUFDSyxTQUFTLENBQUMsY0FBc0I7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHFDQUF1QixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLDRCQUE0QixDQUFDLGlCQUF5QjtRQUNqRSxNQUFNLE1BQU0sR0FBcUIsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRW5FLElBQUksS0FBSyxFQUFFLE1BQU0sSUFBSSxJQUFJLE1BQU0sRUFBRTtZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25CO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLGVBQWU7UUFDMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakQsTUFBTSxZQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUV2QyxJQUFJLEtBQUssRUFBRSxNQUFNLFdBQVcsSUFBSSxRQUFRLEVBQUU7WUFDeEMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7Q0FDRjtBQTVFRCw0QkE0RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vbml0b3JDbGllbnR9IGZyb20gJ0BhenVyZS9hcm0tbW9uaXRvcic7XG5pbXBvcnQge0RlZmF1bHRBenVyZUNyZWRlbnRpYWx9IGZyb20gJ0BhenVyZS9pZGVudGl0eSc7XG5pbXBvcnQge1xuICBDb21wdXRlTWFuYWdlbWVudENsaWVudCxcbiAgUmVzb3VyY2VTa3UsXG4gIFZpcnR1YWxNYWNoaW5lLFxufSBmcm9tICdAYXp1cmUvYXJtLWNvbXB1dGUnO1xuXG5pbXBvcnQge0dldE1ldHJpY3NQYXJhbXN9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgQXp1cmVBUEkge1xuICBwcml2YXRlIGNyZWRlbnRpYWw6IERlZmF1bHRBenVyZUNyZWRlbnRpYWw7XG4gIHByaXZhdGUgY2xpZW50ITogQ29tcHV0ZU1hbmFnZW1lbnRDbGllbnQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVkZW50aWFsID0gbmV3IERlZmF1bHRBenVyZUNyZWRlbnRpYWwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIG1ldHJpY3MgZm9yIGEgc3BlY2lmaWMgdmlydHVhbCBtYWNoaW5lLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldE1ldHJpY3NUaW1lc2VyaWVzKFxuICAgIHBhcmFtczogR2V0TWV0cmljc1BhcmFtcyxcbiAgICBtZXRyaWNOYW1lOiBzdHJpbmdcbiAgKSB7XG4gICAgY29uc3Qge1xuICAgICAgc3Vic2NyaXB0aW9uSWQsXG4gICAgICByZXNvdXJjZUdyb3VwTmFtZSxcbiAgICAgIHRpbWVzcGFuLFxuICAgICAgaW50ZXJ2YWwsXG4gICAgICBhZ2dyZWdhdGlvbixcbiAgICAgIHZtTmFtZSxcbiAgICB9ID0gcGFyYW1zO1xuXG4gICAgdGhpcy5zZXRDbGllbnQoc3Vic2NyaXB0aW9uSWQpO1xuXG4gICAgY29uc3QgbW9uaXRvckNsaWVudCA9IG5ldyBNb25pdG9yQ2xpZW50KHRoaXMuY3JlZGVudGlhbCwgc3Vic2NyaXB0aW9uSWQpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbW9uaXRvckNsaWVudC5tZXRyaWNzLmxpc3QoXG4gICAgICBgc3Vic2NyaXB0aW9ucy8ke3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy8ke3Jlc291cmNlR3JvdXBOYW1lfS9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzLyR7dm1OYW1lfWAsXG4gICAgICB7XG4gICAgICAgIG1ldHJpY25hbWVzOiBtZXRyaWNOYW1lLFxuICAgICAgICB0aW1lc3BhbixcbiAgICAgICAgaW50ZXJ2YWwsXG4gICAgICAgIGFnZ3JlZ2F0aW9uLFxuICAgICAgfVxuICAgICk7XG5cbiAgICByZXR1cm4gKHJlc3BvbnNlLnZhbHVlWzBdLnRpbWVzZXJpZXMgfHwgW10pXG4gICAgICAubWFwKHNlcmllcyA9PiBzZXJpZXMuZGF0YSB8fCBbXSlcbiAgICAgIC5mbGF0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB1cCB0aGUgQ29tcHV0ZU1hbmFnZW1lbnRDbGllbnQgd2l0aCB0aGUgc3BlY2lmaWVkIHN1YnNjcmlwdGlvbiBJRC5cbiAgICovXG4gIHByaXZhdGUgc2V0Q2xpZW50KHN1YnNjcmlwdGlvbklkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBDb21wdXRlTWFuYWdlbWVudENsaWVudCh0aGlzLmNyZWRlbnRpYWwsIHN1YnNjcmlwdGlvbklkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGEgbGlzdCBvZiB2aXJ0dWFsIG1hY2hpbmVzIHdpdGhpbiBhIHNwZWNpZmljIHJlc291cmNlIGdyb3VwLlxuICAgKi9cbiAgcHVibGljIGFzeW5jIGdldFZNRGF0YUJ5UmVzb3VyY2VHcm91cE5hbWUocmVzb3VyY2VHcm91cE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHZtRGF0YTogVmlydHVhbE1hY2hpbmVbXSA9IFtdO1xuICAgIGNvbnN0IHZtTGlzdCA9IHRoaXMuY2xpZW50LnZpcnR1YWxNYWNoaW5lcy5saXN0KHJlc291cmNlR3JvdXBOYW1lKTtcblxuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiB2bUxpc3QpIHtcbiAgICAgIHZtRGF0YS5wdXNoKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiB2bURhdGE7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBhIGxpc3Qgb2YgYXZhaWxhYmxlIHJlc291cmNlIFNrdXMuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0UmVzb3VyY2VTa3VzKCkge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5jbGllbnQucmVzb3VyY2VTa3VzLmxpc3QoKTtcbiAgICBjb25zdCByZXNvdXJjZVNrdXM6IFJlc291cmNlU2t1W10gPSBbXTtcblxuICAgIGZvciBhd2FpdCAoY29uc3QgcmVzb3VyY2VTa3Ugb2YgaXRlcmF0b3IpIHtcbiAgICAgIHJlc291cmNlU2t1cy5wdXNoKHJlc291cmNlU2t1KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzb3VyY2VTa3VzO1xuICB9XG59XG4iXX0=