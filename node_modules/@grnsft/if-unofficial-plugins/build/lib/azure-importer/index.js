"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureImporter = void 0;
const dotenv = require("dotenv");
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const azure_api_1 = require("./azure-api");
const config_1 = require("./config");
const { UnsupportedValueError, InputValidationError, ConfigValidationError } = errors_1.ERRORS;
const AzureImporter = () => {
    const metadata = { kind: 'execute' };
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.AzureImporter.name);
    const azureAPI = new azure_api_1.AzureAPI();
    /**
     * Executes the model for a list of input parameters.
     */
    const execute = async (inputs, config) => {
        dotenv.config();
        const validatedConfig = validateConfig(config);
        let enrichedOutputsArray = [];
        for await (const input of inputs) {
            const mergedWithConfig = Object.assign({}, validateInput(input), validatedConfig);
            const azureInput = mapInputToAzureInputs(mergedWithConfig);
            const rawResults = await getVmUsage(azureInput);
            const rawMetadataResults = await getInstanceMetadata(azureInput.vmName, azureInput.resourceGroupName);
            mergedWithConfig['duration'] = calculateDurationPerInput(azureInput);
            enrichedOutputsArray = enrichOutputs(rawResults, rawMetadataResults, mergedWithConfig);
        }
        return enrichedOutputsArray.flat();
    };
    /**
     * Enriches the raw output and metadata results with additional information
     * and maps them to a new structure based on the PluginParams input.
     */
    const enrichOutputs = (rawResults, rawMetadataResults, input) => {
        return rawResults.timestamps.map((timestamp, index) => ({
            'cloud/vendor': 'azure',
            'cpu/utilization': rawResults.cpuUtilizations[index],
            'memory/available/GB': parseFloat(rawResults.memAvailable[index]) * 1e-9,
            'memory/used/GB': parseFloat(rawMetadataResults.totalMemoryGB) -
                parseFloat(rawResults.memAvailable[index]) * 1e-9,
            'memory/capacity/GB': rawMetadataResults.totalMemoryGB,
            'memory/utilization': ((parseFloat(rawMetadataResults.totalMemoryGB) -
                parseFloat(rawResults.memAvailable[index]) * 1e-9) /
                parseFloat(rawMetadataResults.totalMemoryGB)) *
                100,
            location: rawMetadataResults.location,
            'cloud/instance-type': rawMetadataResults.instanceType,
            ...input,
            timestamp,
        }));
    };
    /**
     * Maps PluginParams input to AzureInputs structure for Azure-specific queries.
     */
    const mapInputToAzureInputs = (input) => {
        return {
            aggregation: input['azure-observation-aggregation'],
            resourceGroupName: input['azure-resource-group'],
            vmName: input['azure-vm-name'],
            subscriptionId: input['azure-subscription-id'],
            timestamp: input['timestamp'],
            duration: input['duration'].toString(),
            window: input['azure-observation-window'],
            timespan: getTimeSpan(input['duration'], input['timestamp']),
            interval: getInterval(input['azure-observation-window']),
        };
    };
    const validateConfig = (config) => {
        if (!config) {
            throw new ConfigValidationError(errorBuilder({ message: 'Config must be provided.' }));
        }
        const schema = zod_1.z
            .object({
            'azure-observation-window': zod_1.z.string(),
            'azure-observation-aggregation': zod_1.z.string(),
            'azure-resource-group': zod_1.z.string(),
            'azure-vm-name': zod_1.z.string(),
            'azure-subscription-id': zod_1.z.string(),
        })
            .refine(validations_1.allDefined, {
            message: 'All parameters should be present.',
        });
        return (0, validations_1.validate)(schema, config);
    };
    /**
     * Checks for required fields in input.
     */
    const validateInput = (input) => {
        const schema = zod_1.z
            .object({
            timestamp: zod_1.z.string().datetime(),
            duration: zod_1.z.number(),
        })
            .refine(validations_1.allDefined);
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * Retrieves virtual machine usage metrics from Azure based on the provided AzureInputs.
     */
    const getVmUsage = async (metricParams) => {
        const timestamps = [];
        const cpuUtils = [];
        const memAvailable = [];
        // Helper function to parse metric data and populate metricArray and timestamps.
        const parseMetrics = async (timeSeriesData, metricArray, metricName) => {
            for (const data of (await timeSeriesData) ?? []) {
                if (typeof data.average !== 'undefined') {
                    metricArray.push(data.average.toString());
                    if (metricName === 'cpuUtilizations') {
                        timestamps.push(data.timeStamp.toISOString());
                    }
                }
            }
        };
        parseMetrics(getCPUMetrics(metricParams), cpuUtils, 'cpuUtilizations');
        parseMetrics(getRawMetrics(metricParams), memAvailable, '');
        return { timestamps, cpuUtilizations: cpuUtils, memAvailable };
    };
    /**
     * Gets CPU metrics by calling monitor client.
     */
    const getCPUMetrics = async (metricParams) => {
        return azureAPI.getMetricsTimeseries(metricParams, 'Percentage CPU');
    };
    /**
     * Gets RAW metrics by calling monitor client.
     */
    const getRawMetrics = async (metricParams) => {
        return azureAPI.getMetricsTimeseries(metricParams, 'Available Memory Bytes');
    };
    /**
     * Takes manifest `timestamp` and `duration` and returns an Azure formatted `timespan` value.
     */
    const getTimeSpan = (duration, timestamp) => {
        const start = new Date(timestamp);
        const end = new Date(start.getTime() + duration * 1000);
        return `${start.toISOString()}/${end.toISOString()}`;
    };
    /**
     * Formats given `amountOfTime` according to given `unit`.
     * Throws error if given `unit` is not supported.
     */
    const timeUnitConverter = (amountOfTime, unit) => {
        const unitsMap = {
            seconds: 'The minimum unit of time for azure importer is minutes',
            minutes: `T${amountOfTime}M`,
            hours: `T${amountOfTime}H`,
            days: `${amountOfTime}D`,
            weeks: `${amountOfTime}W`,
            months: `${amountOfTime}M`,
            years: `${amountOfTime}Y`,
        };
        const matchedUnit = Object.keys(unitsMap).find(key => {
            return config_1.ALIASES_OF_UNITS[key].includes(unit && unit.toLowerCase());
        });
        if (!matchedUnit) {
            throw new UnsupportedValueError(errorBuilder({
                message: 'azure-observation-window parameter is malformed',
            }));
        }
        if (matchedUnit === 'seconds') {
            throw new InputValidationError(errorBuilder({ message: unitsMap[matchedUnit] }));
        }
        return unitsMap[matchedUnit];
    };
    /**
     * Takes granularity as e.g. "1 m", "1 hr" and translates into ISO8601 as expected by the azure API.
     */
    const getInterval = (window) => {
        const [amountOfTime, unit] = window.split(' ', 2);
        return `P${timeUnitConverter(parseFloat(amountOfTime), unit)}`;
    };
    /**
     * Caculates total memory based on data from ComputeManagementClient response.
     */
    const calculateTotalMemory = async (instanceType, location) => {
        const resourceSkusList = await azureAPI.getResourceSkus();
        const filteredMemData = resourceSkusList
            .filter(item => item.resourceType === 'virtualMachines')
            .filter(item => item.name === instanceType)
            .filter(item => item.locations !== undefined);
        const vmCapabilitiesData = filteredMemData
            .filter(item => item.locations !== undefined && item.locations[0] === location)
            .map(item => item.capabilities)[0];
        const totalMemory = vmCapabilitiesData?.find(item => item.name === 'MemoryGB');
        return totalMemory?.value || '';
    };
    /**
     * Gathers instance metadata.
     */
    const getInstanceMetadata = async (vmName, resourceGroupName) => {
        const vmData = await azureAPI.getVMDataByResourceGroupName(resourceGroupName);
        const [location, instanceType] = vmData
            .filter(item => item.name === vmName)
            .map(item => [
            item.location ?? 'unknown',
            item.hardwareProfile?.vmSize ?? 'unknown',
        ])[0];
        const totalMemoryGB = await calculateTotalMemory(instanceType, location);
        return { location, instanceType, totalMemoryGB };
    };
    /**
     * Calculates number of seconds covered by each individual input using `azure-time-window` value
     */
    const calculateDurationPerInput = (azureInputs) => {
        const [value, unit] = azureInputs.window.split(' ', 2);
        return parseFloat(value) * (config_1.TIME_UNITS_IN_SECONDS[unit.toLowerCase()] || 0);
    };
    return {
        metadata,
        execute,
    };
};
exports.AzureImporter = AzureImporter;
//# sourceMappingURL=data:application/json;base64,