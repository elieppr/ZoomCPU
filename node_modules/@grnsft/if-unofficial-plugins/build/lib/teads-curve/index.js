"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeadsCurve = void 0;
const typescript_cubic_spline_1 = require("typescript-cubic-spline");
const zod_1 = require("zod");
const types_1 = require("../../types");
const helpers_1 = require("../../util/helpers");
const validations_1 = require("../../util/validations");
const errors_1 = require("../../util/errors");
const { InputValidationError } = errors_1.ERRORS;
const TeadsCurve = (globalConfig) => {
    const CURVE = [0.12, 0.32, 0.75, 1.02];
    const POINTS = [0, 10, 50, 100];
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.TeadsCurve.name);
    const metadata = {
        kind: 'execute',
    };
    /**
     * Calculate the total emissions for a list of inputs.
     */
    const execute = async (inputs) => {
        const validatedConfig = validateConfig(globalConfig || {});
        return inputs.map((input, index) => {
            const safeInput = validateInput(input);
            const inputWithConfig = Object.assign({}, input, safeInput, validatedConfig);
            const energy = calculateEnergyForInput(inputWithConfig, index);
            return {
                ...input,
                'cpu/energy': energy,
            };
        });
    };
    /**
     * Calculates the energy for a given input, taking into account allocation if available.
     */
    const calculateEnergyForInput = (input, index) => {
        const energyWithoutAllocation = calculateEnergy(input);
        const total = parseNumericField(input, 'vcpus-total', index);
        const allocated = parseNumericField(input, 'vcpus-allocated', index);
        if (allocated !== undefined && total !== undefined && total !== 0) {
            return energyWithoutAllocation * (allocated / total);
        }
        return energyWithoutAllocation;
    };
    /**
     * Calculates the energy consumption for a single input.
     * Uses a spline method on the teads cpu wattage data.
     *
     * duration is in seconds
     * wattage is in watts
     * eg: 30W x 300s = 9000 J
     * 1 Wh = 3600 J
     * 9000 J / 3600 = 2.5 Wh
     * J / 3600 = Wh
     * 2.5 Wh / 1000 = 0.0025 kWh
     * Wh / 1000 = kWh
     * (wattage * duration) / (seconds in an hour) / 1000 = kWh
     */
    const calculateEnergy = (input) => {
        const { duration, 'cpu/utilization': cpu, 'cpu/thermal-design-power': cpuThermalDesignPower, } = input;
        const spline = new typescript_cubic_spline_1.default(POINTS, CURVE);
        const wattage = input.interpolation === types_1.Interpolation.SPLINE
            ? spline.at(cpu) * cpuThermalDesignPower
            : calculateLinearInterpolationWattage(cpu, cpuThermalDesignPower);
        return (wattage * duration) / 3600 / 1000;
    };
    /**
     * Calculates the linear interpolation wattage.
     *
     * sum of base_rate + (cpu - base_cpu) * ratio = total rate of cpu usage
     * total rate * tdp = wattage
     */
    const calculateLinearInterpolationWattage = (cpu, thermalDesignPower) => {
        const result = POINTS.reduce((acc, point, i) => {
            if (cpu === point) {
                acc.baseRate = CURVE[i];
                acc.baseCpu = point;
            }
            else if (cpu > point && cpu < POINTS[i + 1]) {
                acc.baseRate = CURVE[i];
                acc.baseCpu = point;
                acc.ratio = (CURVE[i + 1] - CURVE[i]) / (POINTS[i + 1] - point);
            }
            return acc;
        }, { baseRate: 0, baseCpu: 0, ratio: 0 });
        return ((result.baseRate + (cpu - result.baseCpu) * result.ratio) *
            thermalDesignPower);
    };
    /**
     * Parse a numeric field from the input and handle type validation.
     */
    const parseNumericField = (input, field, index) => {
        if (field in input) {
            const fieldValue = input[field];
            switch (typeof fieldValue) {
                case 'string':
                    return parseFloat(fieldValue);
                case 'number':
                    return fieldValue;
                default:
                    throw new InputValidationError(errorBuilder({
                        message: `Invalid type for '${field}' in input[${index}]`,
                    }));
            }
        }
        return undefined;
    };
    /**
     * Validates config params.
     */
    const validateConfig = (config) => {
        const schema = zod_1.z.object({
            interpolation: zod_1.z.nativeEnum(types_1.Interpolation).optional(),
        });
        // Manually set default value
        const interpolation = config.interpolation ?? types_1.Interpolation.SPLINE;
        return (0, validations_1.validate)(schema, { ...config, interpolation });
    };
    /**
     * Validates parameters.
     */
    const validateInput = (input) => {
        const schema = zod_1.z.object({
            duration: zod_1.z.number().gt(0),
            'cpu/utilization': zod_1.z.number().min(0).max(100),
            'cpu/thermal-design-power': zod_1.z.number().min(1),
        });
        // Manually set default value if the property is missing.
        const cpuTDP = input['cpu/thermal-design-power'] ?? 0;
        return (0, validations_1.validate)(schema, { ...input, cpuTDP });
    };
    return {
        metadata,
        execute,
    };
};
exports.TeadsCurve = TeadsCurve;
//# sourceMappingURL=data:application/json;base64,