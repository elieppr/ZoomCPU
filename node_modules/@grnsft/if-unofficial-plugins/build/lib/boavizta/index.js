"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoaviztaCloudOutput = exports.BoaviztaCpuOutput = void 0;
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const base_output_1 = require("./base-output");
const boavizta_api_1 = require("./boavizta-api");
const { InputValidationError, UnsupportedValueError } = errors_1.ERRORS;
const boaviztaAPI = (0, boavizta_api_1.BoaviztaAPI)();
const baseOutput = (0, base_output_1.BoaviztaBaseOutput)();
const BoaviztaCpuOutput = (globalConfig) => {
    const metadata = { kind: 'execute' };
    const componentType = 'cpu';
    /**
     * Calculates the output of the given usage.
     */
    const execute = async (inputs) => {
        const result = [];
        for await (const input of inputs) {
            const safeInput = validateInput(input);
            const metricTypeData = baseOutput.getMetricTypeData(input);
            const metricType = Object.keys(metricTypeData)[0];
            const mergedWithConfig = Object.assign({}, input, safeInput, { [metricType]: metricTypeData[metricType] }, globalConfig);
            const usageResult = await baseOutput.calculateUsagePerInput(mergedWithConfig, fetchData);
            result.push({
                ...input,
                ...usageResult,
            });
        }
        return result;
    };
    /**
     * Fetches data from the Boavizta API for the CPU plugin.
     */
    const fetchData = async (input, usage) => {
        const data = Object.assign({}, input, { usage });
        const verbose = (globalConfig && globalConfig.verbose) || false;
        const response = await boaviztaAPI.fetchCpuOutputData(data, componentType, verbose);
        const result = baseOutput.formatResponse(response);
        const cpuOutputData = {
            'cpu/energy': result.energy,
            'carbon-embodied': result['carbon-embodied'],
        };
        return cpuOutputData;
    };
    /**
     * Validates static parameters for the CPU plugin using Zod schema.
     */
    const validateInput = (input) => {
        const schema = zod_1.z.object({
            duration: zod_1.z.number().gt(0),
            'cpu/name': zod_1.z.string(),
            'cpu/number-cores': zod_1.z.number(),
            'cpu/expected-lifespan': zod_1.z.number().optional(),
        });
        return (0, validations_1.validate)(schema, input);
    };
    return {
        metadata,
        execute,
    };
};
exports.BoaviztaCpuOutput = BoaviztaCpuOutput;
const BoaviztaCloudOutput = (globalConfig) => {
    const metadata = { kind: 'execute' };
    const instanceTypes = {};
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.BoaviztaCloudOutput.name);
    /**
     * Calculates the output of the given usage.
     */
    const execute = async (inputs) => {
        const result = [];
        for await (const input of inputs) {
            const safeInput = Object.assign({}, input, validateInput(input));
            const metricTypeData = baseOutput.getMetricTypeData(input);
            const metricType = Object.keys(metricTypeData)[0];
            const mergedWithConfig = Object.assign({}, input, safeInput, { [metricType]: metricTypeData[metricType] }, globalConfig);
            await validateProvider(safeInput);
            await validateInstanceType(safeInput);
            await validateLocation(safeInput);
            const usageResult = await baseOutput.calculateUsagePerInput(mergedWithConfig, fetchData);
            result.push({
                ...input,
                ...usageResult,
            });
        }
        return result;
    };
    /**
     * Fetches data from the Boavizta API for the Cloud plugin.
     */
    const fetchData = async (input, usage) => {
        const data = Object.assign({}, input, { usage });
        const verbose = (globalConfig && globalConfig.verbose) || false;
        const response = await boaviztaAPI.fetchCloudInstanceData(data, verbose);
        return baseOutput.formatResponse(response);
    };
    /**
     * Validates static parameters for the Cloud plugin using Zod schema.
     */
    const validateInput = (input) => {
        const schema = zod_1.z.object({
            duration: zod_1.z.number().gt(0),
            provider: zod_1.z.string(),
            'instance-type': zod_1.z.string(),
            verbose: zod_1.z.boolean().optional(),
            'cpu/expected-lifespan': zod_1.z.number().optional(),
        });
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * Validates the provider parameter for the Cloud plugin.
     */
    const validateProvider = async (staticParams) => {
        const supportedProviders = await boaviztaAPI.getSupportedProvidersList();
        if (!supportedProviders.includes(staticParams.provider)) {
            const whiteListedProviders = supportedProviders.join(', ');
            throw new InputValidationError(errorBuilder({
                message: `Invalid 'provider' parameter '${staticParams.provider}'. Valid values are ${whiteListedProviders}`,
            }));
        }
    };
    /**
     * Validates the instance type parameter for the Cloud plugin.
     */
    const validateInstanceType = async (staticParams) => {
        const provider = staticParams.provider;
        if (!instanceTypes[provider] || instanceTypes[provider].length === 0) {
            instanceTypes[provider] =
                await boaviztaAPI.getSupportedInstancesList(provider);
        }
        if (!instanceTypes[provider].includes(staticParams['instance-type'])) {
            const whiteListedTypes = instanceTypes[provider].join(', ');
            throw new UnsupportedValueError(errorBuilder({
                message: `Invalid 'instance-type' parameter: '${staticParams['instance-type']}'. Valid values are : ${whiteListedTypes}`,
            }));
        }
    };
    /**
     * Validates the country parameter for the Cloud plugin.
     */
    const validateLocation = async (staticParams) => {
        if ('country' in staticParams) {
            const countries = await boaviztaAPI.getSupportedLocations();
            const whitelistedCountries = countries.join(', ');
            if (!countries.includes(staticParams.country)) {
                throw new InputValidationError(errorBuilder({
                    message: `Invalid country parameter country. Valid values are ${whitelistedCountries}`,
                }));
            }
            return staticParams.country;
        }
    };
    return {
        metadata,
        execute,
    };
};
exports.BoaviztaCloudOutput = BoaviztaCloudOutput;
//# sourceMappingURL=data:application/json;base64,