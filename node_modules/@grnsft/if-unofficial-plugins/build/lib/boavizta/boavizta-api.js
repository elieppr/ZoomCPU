"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoaviztaAPI = void 0;
const axios_1 = require("axios");
const errors_1 = require("../../util/errors");
const helpers_1 = require("../../util/helpers");
const { APIRequestError } = errors_1.ERRORS;
const BoaviztaAPI = () => {
    const BASE_URL = 'https://api.boavizta.org/v1';
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.BoaviztaAPI.name);
    /**
     * Fetches CPU output data from Boavizta API for a specific component type.
     */
    const fetchCpuOutputData = async (data, componentType, verbose) => {
        const dataCast = {
            core_units: data['cpu/number-cores'],
            name: data['cpu/name'],
            tdp: data['cpu/thermal-design-power'],
        };
        const response = await axios_1.default.post(`${BASE_URL}/component/${componentType}?verbose=${verbose}&duration=${data['usage']['hours_use_time']}`, dataCast);
        return response.data;
    };
    /**
     * Fetches cloud instance data from Boavizta API.
     */
    const fetchCloudInstanceData = async (data, verbose) => {
        const updatedDataCast = replaceHyphensWithUnderscores(data);
        const response = await axios_1.default
            .post(`${BASE_URL}/cloud/instance?verbose=${verbose}&duration=${updatedDataCast['usage']['hours_use_time']}`, {
            provider: data.provider,
            instance_type: data['instance-type'],
            usage: data.usage,
        })
            .catch(error => {
            throw new APIRequestError(errorBuilder({
                message: `Error fetching data from Boavizta API. ${JSON.stringify((error.response &&
                    error.response.data &&
                    error.response.data.detail) ||
                    error)}`,
            }));
        });
        return response?.data;
    };
    /**
     * Gets the list of supported cloud instances for a given provider.
     */
    const getSupportedInstancesList = async (provider) => {
        const instances = await axios_1.default.get(`${BASE_URL}/cloud/instance/all_instances?provider=${provider}`);
        return instances.data;
    };
    /**
     * Gets the list of supported cloud providers.
     */
    const getSupportedProvidersList = async () => {
        const providers = await axios_1.default.get(`${BASE_URL}/cloud/instance/all_providers`);
        return providers.data;
    };
    /**
     * Gets the list of supported locations by the model.
     */
    const getSupportedLocations = async () => {
        const countries = await axios_1.default.get(`${BASE_URL}/utils/country_code`);
        return Object.values(countries.data);
    };
    /**
     * Replaces hyphens with underscores in keys of a key-value pair object.
     */
    const replaceHyphensWithUnderscores = (data) => {
        return Object.fromEntries(Object.entries(data).map(([key, value]) => [
            key.replace(/-/g, '_'),
            value,
        ]));
    };
    return {
        getSupportedLocations,
        getSupportedProvidersList,
        getSupportedInstancesList,
        fetchCloudInstanceData,
        fetchCpuOutputData,
    };
};
exports.BoaviztaAPI = BoaviztaAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hdml6dGEtYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9ib2F2aXp0YS9ib2F2aXp0YS1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQTBCO0FBSTFCLDhDQUF5QztBQUN6QyxnREFBcUQ7QUFJckQsTUFBTSxFQUFDLGVBQWUsRUFBQyxHQUFHLGVBQU0sQ0FBQztBQUUxQixNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUU7SUFDOUIsTUFBTSxRQUFRLEdBQUcsNkJBQTZCLENBQUM7SUFFL0MsTUFBTSxZQUFZLEdBQUcsSUFBQSwyQkFBaUIsRUFBQyxtQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpEOztPQUVHO0lBQ0gsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEVBQzlCLElBQWtCLEVBQ2xCLGFBQXFCLEVBQ3JCLE9BQWdCLEVBQ0MsRUFBRTtRQUNuQixNQUFNLFFBQVEsR0FBRztZQUNmLFVBQVUsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUM7WUFDcEMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDdEIsR0FBRyxFQUFFLElBQUksQ0FBQywwQkFBMEIsQ0FBQztTQUN0QyxDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxlQUFLLENBQUMsSUFBSSxDQUMvQixHQUFHLFFBQVEsY0FBYyxhQUFhLFlBQVksT0FBTyxhQUFhLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQ3ZHLFFBQVEsQ0FDVCxDQUFDO1FBRUYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxzQkFBc0IsR0FBRyxLQUFLLEVBQ2xDLElBQWtCLEVBQ2xCLE9BQWdCLEVBQ0MsRUFBRTtRQUNuQixNQUFNLGVBQWUsR0FBRyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1RCxNQUFNLFFBQVEsR0FBRyxNQUFNLGVBQUs7YUFDekIsSUFBSSxDQUNILEdBQUcsUUFBUSwyQkFBMkIsT0FBTyxhQUFhLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQ3RHO1lBQ0UsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLGFBQWEsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQ3BDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztTQUNsQixDQUNGO2FBQ0EsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2IsTUFBTSxJQUFJLGVBQWUsQ0FDdkIsWUFBWSxDQUFDO2dCQUNYLE9BQU8sRUFBRSwwQ0FBMEMsSUFBSSxDQUFDLFNBQVMsQ0FDL0QsQ0FBQyxLQUFLLENBQUMsUUFBUTtvQkFDYixLQUFLLENBQUMsUUFBUSxDQUFDLElBQUk7b0JBQ25CLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztvQkFDM0IsS0FBSyxDQUNSLEVBQUU7YUFDSixDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUwsT0FBTyxRQUFRLEVBQUUsSUFBSSxDQUFDO0lBQ3hCLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSx5QkFBeUIsR0FBRyxLQUFLLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO1FBQzNELE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FDL0IsR0FBRyxRQUFRLDBDQUEwQyxRQUFRLEVBQUUsQ0FDaEUsQ0FBQztRQUVGLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQztJQUN4QixDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0seUJBQXlCLEdBQUcsS0FBSyxJQUF1QixFQUFFO1FBQzlELE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FDL0IsR0FBRyxRQUFRLCtCQUErQixDQUMzQyxDQUFDO1FBRUYsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLElBQXVCLEVBQUU7UUFDMUQsTUFBTSxTQUFTLEdBQUcsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUMvQixHQUFHLFFBQVEscUJBQXFCLENBQ2pDLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSw2QkFBNkIsR0FBRyxDQUFDLElBQWtCLEVBQWdCLEVBQUU7UUFDekUsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN6QyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7WUFDdEIsS0FBSztTQUNOLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLHFCQUFxQjtRQUNyQix5QkFBeUI7UUFDekIseUJBQXlCO1FBQ3pCLHNCQUFzQjtRQUN0QixrQkFBa0I7S0FDbkIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQWhIVyxRQUFBLFdBQVcsZUFnSHRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IHtLZXlWYWx1ZVBhaXJ9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5cbmltcG9ydCB7RVJST1JTfSBmcm9tICcuLi8uLi91dGlsL2Vycm9ycyc7XG5pbXBvcnQge2J1aWxkRXJyb3JNZXNzYWdlfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnO1xuXG5pbXBvcnQge0lDb3VudHJ5Q29kZXN9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCB7QVBJUmVxdWVzdEVycm9yfSA9IEVSUk9SUztcblxuZXhwb3J0IGNvbnN0IEJvYXZpenRhQVBJID0gKCkgPT4ge1xuICBjb25zdCBCQVNFX1VSTCA9ICdodHRwczovL2FwaS5ib2F2aXp0YS5vcmcvdjEnO1xuXG4gIGNvbnN0IGVycm9yQnVpbGRlciA9IGJ1aWxkRXJyb3JNZXNzYWdlKEJvYXZpenRhQVBJLm5hbWUpO1xuXG4gIC8qKlxuICAgKiBGZXRjaGVzIENQVSBvdXRwdXQgZGF0YSBmcm9tIEJvYXZpenRhIEFQSSBmb3IgYSBzcGVjaWZpYyBjb21wb25lbnQgdHlwZS5cbiAgICovXG4gIGNvbnN0IGZldGNoQ3B1T3V0cHV0RGF0YSA9IGFzeW5jIChcbiAgICBkYXRhOiBLZXlWYWx1ZVBhaXIsXG4gICAgY29tcG9uZW50VHlwZTogc3RyaW5nLFxuICAgIHZlcmJvc2U6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxvYmplY3Q+ID0+IHtcbiAgICBjb25zdCBkYXRhQ2FzdCA9IHtcbiAgICAgIGNvcmVfdW5pdHM6IGRhdGFbJ2NwdS9udW1iZXItY29yZXMnXSxcbiAgICAgIG5hbWU6IGRhdGFbJ2NwdS9uYW1lJ10sXG4gICAgICB0ZHA6IGRhdGFbJ2NwdS90aGVybWFsLWRlc2lnbi1wb3dlciddLFxuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFxuICAgICAgYCR7QkFTRV9VUkx9L2NvbXBvbmVudC8ke2NvbXBvbmVudFR5cGV9P3ZlcmJvc2U9JHt2ZXJib3NlfSZkdXJhdGlvbj0ke2RhdGFbJ3VzYWdlJ11bJ2hvdXJzX3VzZV90aW1lJ119YCxcbiAgICAgIGRhdGFDYXN0XG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGNsb3VkIGluc3RhbmNlIGRhdGEgZnJvbSBCb2F2aXp0YSBBUEkuXG4gICAqL1xuICBjb25zdCBmZXRjaENsb3VkSW5zdGFuY2VEYXRhID0gYXN5bmMgKFxuICAgIGRhdGE6IEtleVZhbHVlUGFpcixcbiAgICB2ZXJib3NlOiBib29sZWFuXG4gICk6IFByb21pc2U8b2JqZWN0PiA9PiB7XG4gICAgY29uc3QgdXBkYXRlZERhdGFDYXN0ID0gcmVwbGFjZUh5cGhlbnNXaXRoVW5kZXJzY29yZXMoZGF0YSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zXG4gICAgICAucG9zdChcbiAgICAgICAgYCR7QkFTRV9VUkx9L2Nsb3VkL2luc3RhbmNlP3ZlcmJvc2U9JHt2ZXJib3NlfSZkdXJhdGlvbj0ke3VwZGF0ZWREYXRhQ2FzdFsndXNhZ2UnXVsnaG91cnNfdXNlX3RpbWUnXX1gLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZXI6IGRhdGEucHJvdmlkZXIsXG4gICAgICAgICAgaW5zdGFuY2VfdHlwZTogZGF0YVsnaW5zdGFuY2UtdHlwZSddLFxuICAgICAgICAgIHVzYWdlOiBkYXRhLnVzYWdlLFxuICAgICAgICB9XG4gICAgICApXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQVBJUmVxdWVzdEVycm9yKFxuICAgICAgICAgIGVycm9yQnVpbGRlcih7XG4gICAgICAgICAgICBtZXNzYWdlOiBgRXJyb3IgZmV0Y2hpbmcgZGF0YSBmcm9tIEJvYXZpenRhIEFQSS4gJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgKGVycm9yLnJlc3BvbnNlICYmXG4gICAgICAgICAgICAgICAgZXJyb3IucmVzcG9uc2UuZGF0YSAmJlxuICAgICAgICAgICAgICAgIGVycm9yLnJlc3BvbnNlLmRhdGEuZGV0YWlsKSB8fFxuICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICApfWAsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlPy5kYXRhO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsaXN0IG9mIHN1cHBvcnRlZCBjbG91ZCBpbnN0YW5jZXMgZm9yIGEgZ2l2ZW4gcHJvdmlkZXIuXG4gICAqL1xuICBjb25zdCBnZXRTdXBwb3J0ZWRJbnN0YW5jZXNMaXN0ID0gYXN5bmMgKHByb3ZpZGVyOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSBhd2FpdCBheGlvcy5nZXQ8c3RyaW5nW10+KFxuICAgICAgYCR7QkFTRV9VUkx9L2Nsb3VkL2luc3RhbmNlL2FsbF9pbnN0YW5jZXM/cHJvdmlkZXI9JHtwcm92aWRlcn1gXG4gICAgKTtcblxuICAgIHJldHVybiBpbnN0YW5jZXMuZGF0YTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgY2xvdWQgcHJvdmlkZXJzLlxuICAgKi9cbiAgY29uc3QgZ2V0U3VwcG9ydGVkUHJvdmlkZXJzTGlzdCA9IGFzeW5jICgpOiBQcm9taXNlPHN0cmluZ1tdPiA9PiB7XG4gICAgY29uc3QgcHJvdmlkZXJzID0gYXdhaXQgYXhpb3MuZ2V0PHN0cmluZ1tdPihcbiAgICAgIGAke0JBU0VfVVJMfS9jbG91ZC9pbnN0YW5jZS9hbGxfcHJvdmlkZXJzYFxuICAgICk7XG5cbiAgICByZXR1cm4gcHJvdmlkZXJzLmRhdGE7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIGxvY2F0aW9ucyBieSB0aGUgbW9kZWwuXG4gICAqL1xuICBjb25zdCBnZXRTdXBwb3J0ZWRMb2NhdGlvbnMgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmdbXT4gPT4ge1xuICAgIGNvbnN0IGNvdW50cmllcyA9IGF3YWl0IGF4aW9zLmdldDxJQ291bnRyeUNvZGVzPihcbiAgICAgIGAke0JBU0VfVVJMfS91dGlscy9jb3VudHJ5X2NvZGVgXG4gICAgKTtcblxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKGNvdW50cmllcy5kYXRhKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVwbGFjZXMgaHlwaGVucyB3aXRoIHVuZGVyc2NvcmVzIGluIGtleXMgb2YgYSBrZXktdmFsdWUgcGFpciBvYmplY3QuXG4gICAqL1xuICBjb25zdCByZXBsYWNlSHlwaGVuc1dpdGhVbmRlcnNjb3JlcyA9IChkYXRhOiBLZXlWYWx1ZVBhaXIpOiBLZXlWYWx1ZVBhaXIgPT4ge1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICBPYmplY3QuZW50cmllcyhkYXRhKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gW1xuICAgICAgICBrZXkucmVwbGFjZSgvLS9nLCAnXycpLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGdldFN1cHBvcnRlZExvY2F0aW9ucyxcbiAgICBnZXRTdXBwb3J0ZWRQcm92aWRlcnNMaXN0LFxuICAgIGdldFN1cHBvcnRlZEluc3RhbmNlc0xpc3QsXG4gICAgZmV0Y2hDbG91ZEluc3RhbmNlRGF0YSxcbiAgICBmZXRjaENwdU91dHB1dERhdGEsXG4gIH07XG59O1xuIl19