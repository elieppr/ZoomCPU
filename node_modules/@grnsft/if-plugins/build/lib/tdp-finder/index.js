"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TdpFinder = void 0;
const fs = require("fs");
const path = require("path");
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const { UnsupportedValueError, ReadFileError } = errors_1.ERRORS;
const TdpFinder = () => {
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.TdpFinder.name);
    const metadata = {
        kind: 'execute',
    };
    /**
     * Calculate the total emissions for a list of inputs.
     */
    const execute = async (inputs) => {
        const data = await loadData();
        return inputs.map((input, index) => {
            const safeInput = Object.assign({}, input, validateInput(input));
            const processors = safeInput['physical-processor']
                .split(',')
                .map(processor => processor.trim());
            for (const processor of processors) {
                if (!(processor in data)) {
                    throw new UnsupportedValueError(errorBuilder({
                        message: `'physical-processor': ${processor} from input[${index}] is not found in the database`,
                    }));
                }
                safeInput['cpu/thermal-design-power'] = Math.max(safeInput['cpu/thermal-design-power'] ?? 0, data[processor]);
            }
            return safeInput;
        });
    };
    /**
     * Load data from csv files.
     */
    const loadData = async () => {
        const files = ['data.csv', 'data2.csv', 'boavizta-data.csv'];
        const combinedData = await files.reduce(async (accPromise, filePath) => {
            const acc = await accPromise;
            const lines = await readFile(filePath);
            return lines.reduce((dataAcc, line) => {
                const [name_w_at, tdp_r] = line.split(',');
                if (name_w_at === '') {
                    return dataAcc; // Skip processing empty lines
                }
                const name = name_w_at.split('@')[0].trim();
                const tdp = parseFloat(tdp_r.replace('\r', ''));
                if (!(name in dataAcc) || dataAcc[name] < tdp) {
                    dataAcc[name] = tdp;
                }
                return dataAcc;
            }, acc);
        }, Promise.resolve({}));
        return combinedData;
    };
    /**
     * Read the file with provided filePath.
     */
    const readFile = async (filePath) => {
        try {
            const result = await fs.promises.readFile(path.join(__dirname, filePath), 'utf8');
            return result.split('\n');
        }
        catch (error) {
            throw new ReadFileError(`Error reading file ${filePath}: ${error}`);
        }
    };
    /**
     * Checks for required fields in input.
     */
    const validateInput = (input) => {
        const schema = zod_1.z
            .object({
            'physical-processor': zod_1.z.string(),
        })
            .refine(validations_1.allDefined, {
            message: '`physical-processor` should be present.',
        });
        return (0, validations_1.validate)(schema, input);
    };
    return {
        metadata,
        execute,
    };
};
exports.TdpFinder = TdpFinder;
//# sourceMappingURL=data:application/json;base64,