"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SciM = void 0;
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const { InputValidationError } = errors_1.ERRORS;
const SciM = () => {
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.SciM.name);
    const metadata = {
        kind: 'execute',
    };
    const METRICS = [
        'device/emissions-embodied',
        'device/expected-lifespan',
        'resources-reserved',
        'vcpus-allocated',
        'resources-total',
        'vcpus-total',
    ];
    /**
     * Calculate the Embodied carbon for a list of inputs.
     */
    const execute = async (inputs) => {
        return inputs.map(input => {
            const safeInput = validateInput(input);
            return {
                ...input,
                'carbon-embodied': calculateEmbodiedCarbon(safeInput),
            };
        });
    };
    /**
     * Calculate the Embodied carbon for the input.
     * M = totalEmissions * (duration/ExpectedLifespan) * (resourcesReserved/totalResources)
     */
    const calculateEmbodiedCarbon = (input) => {
        const totalEmissions = parseNumberInput(input['device/emissions-embodied'], 'gCO2e');
        const duration = parseNumberInput(input['duration'], 'seconds');
        const expectedLifespan = parseNumberInput(input['device/expected-lifespan'], 'seconds');
        const resourcesReserved = parseNumberInput(input['vcpus-allocated'] || input['resources-reserved'], 'count');
        const totalResources = parseNumberInput(input['vcpus-total'] || input['resources-total'], 'count');
        return (totalEmissions *
            (duration / expectedLifespan) *
            (resourcesReserved / totalResources));
    };
    /**
     * Parses the input value, ensuring it is a valid number, and returns the parsed number.
     * Throws an InputValidationError if the value is not a valid number.
     */
    const parseNumberInput = (value, unit) => {
        const parsedValue = typeof value === 'string' ? parseFloat(value) : value;
        if (typeof parsedValue !== 'number' || isNaN(parsedValue)) {
            throw new InputValidationError(errorBuilder({
                message: `'${value}' is not a valid number in input. Please provide it as ${unit}.`,
            }));
        }
        return parsedValue;
    };
    /**
     * Checks for required fields in input.
     */
    const validateInput = (input) => {
        const schemaWithVcpus = zod_1.z.object({
            'device/emissions-embodied': zod_1.z.number().gte(0).min(0),
            'device/expected-lifespan': zod_1.z.number().gte(0).min(0),
            'vcpus-allocated': zod_1.z.number().gte(0).min(0),
            'vcpus-total': zod_1.z.number().gte(0).min(0),
            duration: zod_1.z.number().gte(1),
        });
        const schemaWithResources = zod_1.z.object({
            'device/emissions-embodied': zod_1.z.number().gte(0).min(0),
            'device/expected-lifespan': zod_1.z.number().gte(0).min(0),
            'resources-reserved': zod_1.z.number().gte(0).min(0),
            'resources-total': zod_1.z.number().gte(0).min(0),
            duration: zod_1.z.number().gte(1),
        });
        const schema = schemaWithVcpus.or(schemaWithResources).refine(validations_1.allDefined, {
            message: `All ${METRICS} should be present.`,
        });
        return (0, validations_1.validate)(schema, input);
    };
    return {
        metadata,
        execute,
    };
};
exports.SciM = SciM;
//# sourceMappingURL=data:application/json;base64,