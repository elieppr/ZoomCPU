"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SciO = void 0;
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const SciO = () => {
    const METRICS = ['grid/carbon-intensity', 'energy'];
    const metadata = {
        kind: 'execute',
    };
    /**
     * Calculate the total emissions for a list of inputs.
     */
    const execute = async (inputs) => inputs.map(input => {
        const safeInput = Object.assign({}, input, validateSingleInput(input));
        return {
            ...input,
            'carbon-operational': calculateOperationalCarbon(safeInput),
        };
    });
    /**
     * Calculate the Operational carbon for the input.
     */
    const calculateOperationalCarbon = (input) => {
        return parseFloat(input[METRICS[0]]) * parseFloat(input[METRICS[1]]);
    };
    /**
     * Checks for required fields in input.
     */
    const validateSingleInput = (input) => {
        const schema = zod_1.z
            .object({
            'grid/carbon-intensity': zod_1.z.number().min(0),
            energy: zod_1.z.number().min(0),
        })
            .refine(validations_1.allDefined, {
            message: `Both ${METRICS} should present.`,
        });
        return (0, validations_1.validate)(schema, input);
    };
    return {
        metadata,
        execute,
    };
};
exports.SciO = SciO;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3NjaS1vL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUFzQjtBQUt0Qix3REFBNEQ7QUFFckQsTUFBTSxJQUFJLEdBQUcsR0FBb0IsRUFBRTtJQUN4QyxNQUFNLE9BQU8sR0FBRyxDQUFDLHVCQUF1QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sUUFBUSxHQUFHO1FBQ2YsSUFBSSxFQUFFLFNBQVM7S0FDaEIsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE1BQXNCLEVBQUUsRUFBRSxDQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXZFLE9BQU87WUFDTCxHQUFHLEtBQUs7WUFDUixvQkFBb0IsRUFBRSwwQkFBMEIsQ0FBQyxTQUFTLENBQUM7U0FDNUQsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUw7O09BRUc7SUFDSCxNQUFNLDBCQUEwQixHQUFHLENBQUMsS0FBbUIsRUFBRSxFQUFFO1FBQ3pELE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEVBQUU7UUFDbEQsTUFBTSxNQUFNLEdBQUcsT0FBQzthQUNiLE1BQU0sQ0FBQztZQUNOLHVCQUF1QixFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMxQixDQUFDO2FBQ0QsTUFBTSxDQUFDLHdCQUFVLEVBQUU7WUFDbEIsT0FBTyxFQUFFLFFBQVEsT0FBTyxrQkFBa0I7U0FDM0MsQ0FBQyxDQUFDO1FBRUwsT0FBTyxJQUFBLHNCQUFRLEVBQXlCLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsUUFBUTtRQUNSLE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBOUNXLFFBQUEsSUFBSSxRQThDZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7en0gZnJvbSAnem9kJztcblxuaW1wb3J0IHtQbHVnaW5JbnRlcmZhY2V9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtQbHVnaW5QYXJhbXN9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5cbmltcG9ydCB7dmFsaWRhdGUsIGFsbERlZmluZWR9IGZyb20gJy4uLy4uL3V0aWwvdmFsaWRhdGlvbnMnO1xuXG5leHBvcnQgY29uc3QgU2NpTyA9ICgpOiBQbHVnaW5JbnRlcmZhY2UgPT4ge1xuICBjb25zdCBNRVRSSUNTID0gWydncmlkL2NhcmJvbi1pbnRlbnNpdHknLCAnZW5lcmd5J107XG4gIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgIGtpbmQ6ICdleGVjdXRlJyxcbiAgfTtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0b3RhbCBlbWlzc2lvbnMgZm9yIGEgbGlzdCBvZiBpbnB1dHMuXG4gICAqL1xuICBjb25zdCBleGVjdXRlID0gYXN5bmMgKGlucHV0czogUGx1Z2luUGFyYW1zW10pID0+XG4gICAgaW5wdXRzLm1hcChpbnB1dCA9PiB7XG4gICAgICBjb25zdCBzYWZlSW5wdXQgPSBPYmplY3QuYXNzaWduKHt9LCBpbnB1dCwgdmFsaWRhdGVTaW5nbGVJbnB1dChpbnB1dCkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgJ2NhcmJvbi1vcGVyYXRpb25hbCc6IGNhbGN1bGF0ZU9wZXJhdGlvbmFsQ2FyYm9uKHNhZmVJbnB1dCksXG4gICAgICB9O1xuICAgIH0pO1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIE9wZXJhdGlvbmFsIGNhcmJvbiBmb3IgdGhlIGlucHV0LlxuICAgKi9cbiAgY29uc3QgY2FsY3VsYXRlT3BlcmF0aW9uYWxDYXJib24gPSAoaW5wdXQ6IFBsdWdpblBhcmFtcykgPT4ge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KGlucHV0W01FVFJJQ1NbMF1dKSAqIHBhcnNlRmxvYXQoaW5wdXRbTUVUUklDU1sxXV0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgZm9yIHJlcXVpcmVkIGZpZWxkcyBpbiBpbnB1dC5cbiAgICovXG4gIGNvbnN0IHZhbGlkYXRlU2luZ2xlSW5wdXQgPSAoaW5wdXQ6IFBsdWdpblBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IHpcbiAgICAgIC5vYmplY3Qoe1xuICAgICAgICAnZ3JpZC9jYXJib24taW50ZW5zaXR5Jzogei5udW1iZXIoKS5taW4oMCksXG4gICAgICAgIGVuZXJneTogei5udW1iZXIoKS5taW4oMCksXG4gICAgICB9KVxuICAgICAgLnJlZmluZShhbGxEZWZpbmVkLCB7XG4gICAgICAgIG1lc3NhZ2U6IGBCb3RoICR7TUVUUklDU30gc2hvdWxkIHByZXNlbnQuYCxcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhbGlkYXRlPHouaW5mZXI8dHlwZW9mIHNjaGVtYT4+KHNjaGVtYSwgaW5wdXQpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbWV0YWRhdGEsXG4gICAgZXhlY3V0ZSxcbiAgfTtcbn07XG4iXX0=