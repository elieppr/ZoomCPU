"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sci = void 0;
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const config_1 = require("./config");
const { InputValidationError } = errors_1.ERRORS;
const Sci = (globalConfig) => {
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.Sci.name);
    const metadata = {
        kind: 'execute',
    };
    /**
     * Calculate the total emissions for a list of inputs.
     */
    const execute = async (inputs, config) => {
        const mergedConfig = Object.assign({}, globalConfig, config);
        const validatedConfigs = validateConfig(mergedConfig);
        return inputs.map(input => {
            const safeInput = validateInput(input);
            const inputWithConfigs = Object.assign({}, input, safeInput, validatedConfigs);
            return {
                ...input,
                ...tuneInput(inputWithConfigs),
            };
        });
    };
    /**
     * Given an input, tunes it and returns the tuned input.
     */
    const tuneInput = (input) => {
        const sciPerSecond = calculateSciSeconds(input);
        const factor = getFunctionalUnitConversionFactor(input);
        if (!input['functional-unit-time']) {
            return {
                carbon: input['carbon'] ?? sciPerSecond,
                sci: sciPerSecond / factor,
            };
        }
        const functionalUnitTime = parseTime(input);
        const sciTimed = convertSciToTimeUnit(sciPerSecond, functionalUnitTime);
        const sciTimedDuration = sciTimed * functionalUnitTime.value;
        return {
            carbon: input['carbon'] ?? sciPerSecond,
            sci: sciTimedDuration / factor,
        };
    };
    /**
     * Gets the conversion factor based on the functional unit specified in the input.
     * If the 'functional-unit' exists in the input and is not 'none' or an empty string,
     * returns the value; otherwise, defaults to 1.
     */
    const getFunctionalUnitConversionFactor = (input) => {
        const functionalUnit = input['functional-unit'];
        return functionalUnit in input &&
            input[functionalUnit] !== 'none' &&
            input[functionalUnit] !== ''
            ? input[functionalUnit]
            : 1;
    };
    /**
     * Converts the given sci value from seconds to the specified time unit.
     */
    const convertSciToTimeUnit = (sciPerSecond, functionalUnitTime) => {
        const conversionFactor = config_1.TIME_UNITS_IN_SECONDS[functionalUnitTime.unit];
        if (!conversionFactor) {
            throw new InputValidationError(errorBuilder({
                message: 'functional-unit-time is not in recognized unit of time',
            }));
        }
        return sciPerSecond * conversionFactor;
    };
    /**
     * Calculates sci in seconds for a given input.
     */
    const calculateSciSeconds = (input) => {
        const operational = parseFloat(input['carbon-operational']);
        const embodied = parseFloat(input['carbon-embodied']);
        const sciPerSecond = (operational + embodied) / input['duration'];
        return 'carbon' in input
            ? input['carbon'] / input['duration']
            : sciPerSecond;
    };
    /**
     * Validates node and gloabl configs.
     */
    const validateConfig = (config) => {
        const unitWarnMessage = 'Please ensure you have provided one value and one unit and they are either space, underscore, or hyphen separated.';
        const errorMessage = 'Either or both `functional-unit-time` and `functional-unit` should be provided';
        const schema = zod_1.z
            .object({
            'functional-unit-time': zod_1.z
                .string()
                .regex(new RegExp('^[0-9][ _-][a-zA-Z]+$'))
                .min(3, unitWarnMessage)
                .optional(),
            'functional-unit': zod_1.z.string().optional(),
        })
            .refine(data => data['functional-unit'] || data['functional-unit-time'], {
            message: errorMessage,
        });
        return (0, validations_1.validate)(schema, config);
    };
    /**
     * Checks for fields in input.
     */
    const validateInput = (input) => {
        const message = 'Either carbon or both of carbon-operational and carbon-embodied should be present.';
        const schemaWithCarbon = zod_1.z.object({
            carbon: zod_1.z.number().gte(0),
            duration: zod_1.z.number().gte(1),
        });
        const schemaWithoutCarbon = zod_1.z.object({
            'carbon-operational': zod_1.z.number().gte(0),
            'carbon-embodied': zod_1.z.number().gte(0),
            duration: zod_1.z.number().gte(1),
        });
        const schema = schemaWithCarbon
            .or(schemaWithoutCarbon)
            .refine(validations_1.allDefined, { message });
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * Parses the 'functional-unit-time' from the input and extracts the time value and unit.
     * Updates the functionalUnitTime's unit and value properties accordingly.
     */
    const parseTime = (input) => {
        const splits = input['functional-unit-time'].split(/[-_ ]/);
        return {
            unit: splits[1],
            value: parseFloat(splits[0]),
        };
    };
    return {
        metadata,
        execute,
    };
};
exports.Sci = Sci;
//# sourceMappingURL=data:application/json;base64,