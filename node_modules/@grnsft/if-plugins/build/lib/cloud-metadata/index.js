"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudMetadata = void 0;
const path = require("path");
const fs = require("fs");
const zod_1 = require("zod");
const csv_parse_1 = require("csv-parse");
const validations_1 = require("../../util/validations");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const config_1 = require("./config");
const AWS_INSTANCES = path.resolve(__dirname, './aws-instances.csv');
const AZURE_INSTANCES = path.resolve(__dirname, './azure-instances.csv');
const GSF_DATA = path.resolve(__dirname, './GSF-data.csv');
const { UnsupportedValueError } = errors_1.ERRORS;
const CloudMetadata = () => {
    const SUPPORTED_CLOUDS = ['aws', 'azure'];
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.CloudMetadata.name);
    const metadata = {
        kind: 'execute',
    };
    /**
     * Get provided cloud data into input.
     */
    const execute = async (inputs, config) => {
        const results = [];
        for await (const input of inputs) {
            const safeInput = Object.assign({}, input, validateInput(input));
            const outputParameters = (config && config['fields']) || [];
            const region = input['cloud/region'];
            const draftInput = {};
            // Process instance metadata based on cloud vendor
            if (safeInput['cloud/instance-type']) {
                Object.assign(draftInput, await processInstanceTypeData(safeInput));
            }
            // Process region metadata based on cloud vendor
            if (region) {
                Object.assign(draftInput, await processRegionData(safeInput));
            }
            const configuredParmeters = configureOutput(draftInput, outputParameters);
            Object.assign(safeInput, configuredParmeters);
            results.push(safeInput);
        }
        return results;
    };
    /**
     * Processes region data based on input parameters.
     */
    const processRegionData = async (input) => {
        const region = input['cloud/region'];
        const vendor = input['cloud/vendor'];
        const regionInput = await getVendorRegion(vendor, region);
        if (!regionInput) {
            throw new UnsupportedValueError(errorBuilder({
                message: `'${region}' region is not supported in '${vendor}' cloud vendor`,
            }));
        }
        return {
            'cloud/region-cfe': regionInput['cfe-region'],
            'cloud/region-em-zone-id': regionInput['em-zone-id'],
            'cloud/region-wt-id': regionInput['wt-region-id'],
            'cloud/region-location': regionInput['location'],
            'cloud/region-geolocation': regionInput['geolocation'].trim(),
        };
    };
    /**
     * Processes instance type based on input parameters.
     */
    const processInstanceTypeData = async (input) => {
        const vendor = input['cloud/vendor'];
        const instanceType = input['cloud/instance-type'];
        const instance = await getVendorInstance(vendor, instanceType);
        if (!instance) {
            throw new UnsupportedValueError(errorBuilder({
                scope: 'cloud/instance-type',
                message: `'${instanceType}' instance type is not supported in '${vendor}' cloud vendor`,
            }));
        }
        return {
            'vcpus-allocated': parseInt(instance['cpu-cores-utilized']),
            'vcpus-total': parseInt(instance['cpu-cores-available']),
            'memory-available': parseInt(instance['memory-available']),
            'physical-processor': instance['cpu-model-name'],
            'cpu/thermal-design-power': parseFloat(instance['cpu-tdp']),
        };
    };
    /**
     * Configures parameters for output.
     */
    const configureOutput = (input, outputParameters) => {
        if (outputParameters.length === 0) {
            return input;
        }
        return Object.fromEntries(Object.entries(input).filter(([key]) => outputParameters.includes(key)));
    };
    /**
     * Executes the function associated with the specified vendor type and region.
     */
    const getVendorRegion = async (vendor, region) => {
        const cloudProvider = {
            aws: 'Amazon Web Services',
            azure: 'Microsoft Azure',
            gcp: 'Google Cloud',
        };
        const result = await readCSVFile(GSF_DATA, config_1.GSF_HEADERS);
        const filteredResult = result.find(item => item['cloud-provider'] === cloudProvider[vendor] &&
            (item['cloud-region'] === region || item['cfe-region'] === region));
        return filteredResult;
    };
    /**
     * Execute the function associated with the specified vendor type and get the instance.
     */
    const getVendorInstance = async (vendor, instanceType) => {
        const vendorType = {
            aws: async () => {
                const result = await readCSVFile(AWS_INSTANCES, config_1.AWS_HEADERS);
                return result.find(instance => instance['instance-class'] === instanceType);
            },
            azure: async () => {
                if (instanceType.includes('-')) {
                    const [instanceFamily, instanceSize] = instanceType.split('-');
                    const sizeNumberIndex = instanceSize.search(/\D/);
                    const instanceSizeNumber = sizeNumberIndex !== -1
                        ? instanceSize.slice(sizeNumberIndex)
                        : instanceSize;
                    instanceType = `${instanceFamily}${instanceSizeNumber}`;
                }
                const result = await readCSVFile(AZURE_INSTANCES, config_1.AZURE_HEADERS);
                return result.find(instance => instance['instance-class'] === instanceType);
            },
        };
        return vendorType[vendor]();
    };
    const readCSVFile = async (file, headers) => {
        const result = [];
        const parser = fs
            .createReadStream(file)
            .pipe((0, csv_parse_1.parse)({ delimiter: ',', columns: headers }));
        for await (const record of parser) {
            result.push(record);
        }
        result.shift();
        return result;
    };
    /**
     * Checks for required fields in input.
     */
    const validateInput = (input) => {
        const schema = zod_1.z.object({
            'cloud/vendor': zod_1.z.enum(SUPPORTED_CLOUDS, {
                required_error: `Only ${SUPPORTED_CLOUDS} is currently supported`,
            }),
            'cloud/instance-type': zod_1.z.string(),
            'cloud/region': zod_1.z.string().optional(),
        });
        return (0, validations_1.validate)(schema, input);
    };
    return {
        metadata,
        execute,
    };
};
exports.CloudMetadata = CloudMetadata;
//# sourceMappingURL=data:application/json;base64,