"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENet = void 0;
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const ENet = (globalConfig) => {
    const metadata = {
        kind: 'execute',
    };
    /**
     * Calculate the total emissions for a list of inputs.
     */
    const execute = async (inputs) => {
        const validatedConfig = validateConfig();
        return inputs.map((input) => {
            const inputWithConfig = Object.assign({}, validateSingleInput(input), validatedConfig);
            return {
                ...input,
                'network/energy': calculateEnergy(inputWithConfig),
            };
        });
    };
    /**
     * Validates global and node config parameters.
     */
    const validateConfig = () => {
        const schema = zod_1.z.object({
            'energy-per-gb': zod_1.z.number(),
        });
        // Manually add default value
        if (!globalConfig['energy-per-gb'] || globalConfig['energy-per-gb'] === 0) {
            globalConfig['energy-per-gb'] = 0.001;
        }
        return (0, validations_1.validate)(schema, globalConfig);
    };
    /**
     * Calculates the energy consumption for a single input.
     */
    const calculateEnergy = (input) => {
        const { 'network/data-in': dataIn, 'network/data-out': dataOut, 'energy-per-gb': netEnergy, } = input;
        return (dataIn + dataOut) * netEnergy;
    };
    /**
     * Checks for required fields in input.
     */
    const validateSingleInput = (input) => {
        const schema = zod_1.z.object({
            'network/data-in': zod_1.z.number().gte(0).min(0),
            'network/data-out': zod_1.z.number().gte(0).min(0),
        });
        return (0, validations_1.validate)(schema, input);
    };
    return {
        metadata,
        execute,
    };
};
exports.ENet = ENet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2UtbmV0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUFzQjtBQUV0Qix3REFBZ0Q7QUFLekMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxZQUEwQixFQUFtQixFQUFFO0lBQ2xFLE1BQU0sUUFBUSxHQUFHO1FBQ2YsSUFBSSxFQUFFLFNBQVM7S0FDaEIsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE1BQXNCLEVBQUUsRUFBRTtRQUMvQyxNQUFNLGVBQWUsR0FBRyxjQUFjLEVBQUUsQ0FBQztRQUV6QyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFtQixFQUFFLEVBQUU7WUFDeEMsTUFBTSxlQUFlLEdBQWlCLE1BQU0sQ0FBQyxNQUFNLENBQ2pELEVBQUUsRUFDRixtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFDMUIsZUFBZSxDQUNoQixDQUFDO1lBRUYsT0FBTztnQkFDTCxHQUFHLEtBQUs7Z0JBQ1IsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLGVBQWUsQ0FBQzthQUNuRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sY0FBYyxHQUFHLEdBQUcsRUFBRTtRQUMxQixNQUFNLE1BQU0sR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3RCLGVBQWUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO1NBQzVCLENBQUMsQ0FBQztRQUVILDZCQUE2QjtRQUM3QixJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFlBQVksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMxRSxZQUFZLENBQUMsZUFBZSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3hDLENBQUM7UUFFRCxPQUFPLElBQUEsc0JBQVEsRUFBeUIsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2hFLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEVBQUU7UUFDOUMsTUFBTSxFQUNKLGlCQUFpQixFQUFFLE1BQU0sRUFDekIsa0JBQWtCLEVBQUUsT0FBTyxFQUMzQixlQUFlLEVBQUUsU0FBUyxHQUMzQixHQUFHLEtBQUssQ0FBQztRQUVWLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQ3hDLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtRQUNsRCxNQUFNLE1BQU0sR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3RCLGlCQUFpQixFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMzQyxrQkFBa0IsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDN0MsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFBLHNCQUFRLEVBQXlCLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsUUFBUTtRQUNSLE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBdEVXLFFBQUEsSUFBSSxRQXNFZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7en0gZnJvbSAnem9kJztcblxuaW1wb3J0IHt2YWxpZGF0ZX0gZnJvbSAnLi4vLi4vdXRpbC92YWxpZGF0aW9ucyc7XG5cbmltcG9ydCB7UGx1Z2luSW50ZXJmYWNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7Q29uZmlnUGFyYW1zLCBQbHVnaW5QYXJhbXN9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5cbmV4cG9ydCBjb25zdCBFTmV0ID0gKGdsb2JhbENvbmZpZzogQ29uZmlnUGFyYW1zKTogUGx1Z2luSW50ZXJmYWNlID0+IHtcbiAgY29uc3QgbWV0YWRhdGEgPSB7XG4gICAga2luZDogJ2V4ZWN1dGUnLFxuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIHRvdGFsIGVtaXNzaW9ucyBmb3IgYSBsaXN0IG9mIGlucHV0cy5cbiAgICovXG4gIGNvbnN0IGV4ZWN1dGUgPSBhc3luYyAoaW5wdXRzOiBQbHVnaW5QYXJhbXNbXSkgPT4ge1xuICAgIGNvbnN0IHZhbGlkYXRlZENvbmZpZyA9IHZhbGlkYXRlQ29uZmlnKCk7XG5cbiAgICByZXR1cm4gaW5wdXRzLm1hcCgoaW5wdXQ6IFBsdWdpblBhcmFtcykgPT4ge1xuICAgICAgY29uc3QgaW5wdXRXaXRoQ29uZmlnOiBQbHVnaW5QYXJhbXMgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgdmFsaWRhdGVTaW5nbGVJbnB1dChpbnB1dCksXG4gICAgICAgIHZhbGlkYXRlZENvbmZpZ1xuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5wdXQsXG4gICAgICAgICduZXR3b3JrL2VuZXJneSc6IGNhbGN1bGF0ZUVuZXJneShpbnB1dFdpdGhDb25maWcpLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIGdsb2JhbCBhbmQgbm9kZSBjb25maWcgcGFyYW1ldGVycy5cbiAgICovXG4gIGNvbnN0IHZhbGlkYXRlQ29uZmlnID0gKCkgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAgICdlbmVyZ3ktcGVyLWdiJzogei5udW1iZXIoKSxcbiAgICB9KTtcblxuICAgIC8vIE1hbnVhbGx5IGFkZCBkZWZhdWx0IHZhbHVlXG4gICAgaWYgKCFnbG9iYWxDb25maWdbJ2VuZXJneS1wZXItZ2InXSB8fCBnbG9iYWxDb25maWdbJ2VuZXJneS1wZXItZ2InXSA9PT0gMCkge1xuICAgICAgZ2xvYmFsQ29uZmlnWydlbmVyZ3ktcGVyLWdiJ10gPSAwLjAwMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGU8ei5pbmZlcjx0eXBlb2Ygc2NoZW1hPj4oc2NoZW1hLCBnbG9iYWxDb25maWcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBlbmVyZ3kgY29uc3VtcHRpb24gZm9yIGEgc2luZ2xlIGlucHV0LlxuICAgKi9cbiAgY29uc3QgY2FsY3VsYXRlRW5lcmd5ID0gKGlucHV0OiBQbHVnaW5QYXJhbXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAnbmV0d29yay9kYXRhLWluJzogZGF0YUluLFxuICAgICAgJ25ldHdvcmsvZGF0YS1vdXQnOiBkYXRhT3V0LFxuICAgICAgJ2VuZXJneS1wZXItZ2InOiBuZXRFbmVyZ3ksXG4gICAgfSA9IGlucHV0O1xuXG4gICAgcmV0dXJuIChkYXRhSW4gKyBkYXRhT3V0KSAqIG5ldEVuZXJneTtcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2tzIGZvciByZXF1aXJlZCBmaWVsZHMgaW4gaW5wdXQuXG4gICAqL1xuICBjb25zdCB2YWxpZGF0ZVNpbmdsZUlucHV0ID0gKGlucHV0OiBQbHVnaW5QYXJhbXMpID0+IHtcbiAgICBjb25zdCBzY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgICAnbmV0d29yay9kYXRhLWluJzogei5udW1iZXIoKS5ndGUoMCkubWluKDApLFxuICAgICAgJ25ldHdvcmsvZGF0YS1vdXQnOiB6Lm51bWJlcigpLmd0ZSgwKS5taW4oMCksXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmFsaWRhdGU8ei5pbmZlcjx0eXBlb2Ygc2NoZW1hPj4oc2NoZW1hLCBpbnB1dCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBtZXRhZGF0YSxcbiAgICBleGVjdXRlLFxuICB9O1xufTtcbiJdfQ==