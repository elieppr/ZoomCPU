"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Divide = void 0;
const zod_1 = require("zod");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const validations_1 = require("../../util/validations");
const { InputValidationError, ConfigValidationError } = errors_1.ERRORS;
const Divide = (globalConfig) => {
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.Divide.name);
    const metadata = {
        kind: 'execute',
    };
    /**
     * Checks global config value are valid.
     */
    const validateGlobalConfig = () => {
        if (!globalConfig) {
            throw new ConfigValidationError(errorBuilder({ message: 'Configuration data is missing' }));
        }
        const schema = zod_1.z.object({
            numerator: zod_1.z.string().min(1),
            denominator: zod_1.z.string().or(zod_1.z.number().gt(0)),
            output: zod_1.z.string(),
        });
        return (0, validations_1.validate)(schema, globalConfig);
    };
    /**
     * Checks for required fields in input.
     */
    const validateSingleInput = (input, numerator, denominator) => {
        const schema = zod_1.z
            .object({
            [numerator]: zod_1.z.number(),
            [denominator]: zod_1.z.number().optional(),
        })
            .refine(_data => {
            if (typeof denominator === 'string' && !input[denominator]) {
                throw new InputValidationError(errorBuilder({
                    message: `\`${denominator}\` is missing from the input`,
                }));
            }
            return true;
        });
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * Calculate the division of each input parameter.
     */
    const execute = async (inputs) => {
        const safeGlobalConfig = validateGlobalConfig();
        const { numerator, denominator, output } = safeGlobalConfig;
        return inputs.map(input => {
            const safeInput = Object.assign({}, input, validateSingleInput(input, numerator, denominator));
            return {
                ...input,
                [output]: calculateDivide(safeInput, numerator, denominator),
            };
        });
    };
    /**
     * Calculates the division of the given parameter.
     */
    const calculateDivide = (input, numerator, denominator) => input[numerator] / (input[denominator] || denominator);
    return {
        metadata,
        execute,
    };
};
exports.Divide = Divide;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2RpdmlkZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBc0I7QUFFdEIsZ0RBQXFEO0FBQ3JELDhDQUF5QztBQUN6Qyx3REFBZ0Q7QUFLaEQsTUFBTSxFQUFDLG9CQUFvQixFQUFFLHFCQUFxQixFQUFDLEdBQUcsZUFBTSxDQUFDO0FBRXRELE1BQU0sTUFBTSxHQUFHLENBQUMsWUFBMEIsRUFBbUIsRUFBRTtJQUNwRSxNQUFNLFlBQVksR0FBRyxJQUFBLDJCQUFpQixFQUFDLGNBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxNQUFNLFFBQVEsR0FBRztRQUNmLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxFQUFFO1FBQ2hDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNsQixNQUFNLElBQUkscUJBQXFCLENBQzdCLFlBQVksQ0FBQyxFQUFDLE9BQU8sRUFBRSwrQkFBK0IsRUFBQyxDQUFDLENBQ3pELENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxNQUFNLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN0QixTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUIsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QyxNQUFNLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtTQUNuQixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUEsc0JBQVEsRUFBeUIsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2hFLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUMxQixLQUFtQixFQUNuQixTQUFpQixFQUNqQixXQUE0QixFQUM1QixFQUFFO1FBQ0YsTUFBTSxNQUFNLEdBQUcsT0FBQzthQUNiLE1BQU0sQ0FBQztZQUNOLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtZQUN2QixDQUFDLFdBQVcsQ0FBQyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7U0FDckMsQ0FBQzthQUNELE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNkLElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7Z0JBQzNELE1BQU0sSUFBSSxvQkFBb0IsQ0FDNUIsWUFBWSxDQUFDO29CQUNYLE9BQU8sRUFBRSxLQUFLLFdBQVcsOEJBQThCO2lCQUN4RCxDQUFDLENBQ0gsQ0FBQztZQUNKLENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO1FBRUwsT0FBTyxJQUFBLHNCQUFRLEVBQXlCLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxNQUFzQixFQUFFLEVBQUU7UUFDL0MsTUFBTSxnQkFBZ0IsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ2hELE1BQU0sRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBQyxHQUFHLGdCQUFnQixDQUFDO1FBRTFELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUM3QixFQUFFLEVBQ0YsS0FBSyxFQUNMLG1CQUFtQixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQ25ELENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsS0FBSztnQkFDUixDQUFDLE1BQU0sQ0FBQyxFQUFFLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQzthQUM3RCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sZUFBZSxHQUFHLENBQ3RCLEtBQW1CLEVBQ25CLFNBQWlCLEVBQ2pCLFdBQTRCLEVBQzVCLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUM7SUFFNUQsT0FBTztRQUNMLFFBQVE7UUFDUixPQUFPO0tBQ1IsQ0FBQztBQUNKLENBQUMsQ0FBQztBQXJGVyxRQUFBLE1BQU0sVUFxRmpCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt6fSBmcm9tICd6b2QnO1xuXG5pbXBvcnQge2J1aWxkRXJyb3JNZXNzYWdlfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnO1xuaW1wb3J0IHtFUlJPUlN9IGZyb20gJy4uLy4uL3V0aWwvZXJyb3JzJztcbmltcG9ydCB7dmFsaWRhdGV9IGZyb20gJy4uLy4uL3V0aWwvdmFsaWRhdGlvbnMnO1xuXG5pbXBvcnQge1BsdWdpbkludGVyZmFjZX0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQge0NvbmZpZ1BhcmFtcywgUGx1Z2luUGFyYW1zfSBmcm9tICcuLi8uLi90eXBlcy9jb21tb24nO1xuXG5jb25zdCB7SW5wdXRWYWxpZGF0aW9uRXJyb3IsIENvbmZpZ1ZhbGlkYXRpb25FcnJvcn0gPSBFUlJPUlM7XG5cbmV4cG9ydCBjb25zdCBEaXZpZGUgPSAoZ2xvYmFsQ29uZmlnOiBDb25maWdQYXJhbXMpOiBQbHVnaW5JbnRlcmZhY2UgPT4ge1xuICBjb25zdCBlcnJvckJ1aWxkZXIgPSBidWlsZEVycm9yTWVzc2FnZShEaXZpZGUubmFtZSk7XG4gIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgIGtpbmQ6ICdleGVjdXRlJyxcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2tzIGdsb2JhbCBjb25maWcgdmFsdWUgYXJlIHZhbGlkLlxuICAgKi9cbiAgY29uc3QgdmFsaWRhdGVHbG9iYWxDb25maWcgPSAoKSA9PiB7XG4gICAgaWYgKCFnbG9iYWxDb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBDb25maWdWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgIGVycm9yQnVpbGRlcih7bWVzc2FnZTogJ0NvbmZpZ3VyYXRpb24gZGF0YSBpcyBtaXNzaW5nJ30pXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgICBudW1lcmF0b3I6IHouc3RyaW5nKCkubWluKDEpLFxuICAgICAgZGVub21pbmF0b3I6IHouc3RyaW5nKCkub3Ioei5udW1iZXIoKS5ndCgwKSksXG4gICAgICBvdXRwdXQ6IHouc3RyaW5nKCksXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmFsaWRhdGU8ei5pbmZlcjx0eXBlb2Ygc2NoZW1hPj4oc2NoZW1hLCBnbG9iYWxDb25maWcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgZm9yIHJlcXVpcmVkIGZpZWxkcyBpbiBpbnB1dC5cbiAgICovXG4gIGNvbnN0IHZhbGlkYXRlU2luZ2xlSW5wdXQgPSAoXG4gICAgaW5wdXQ6IFBsdWdpblBhcmFtcyxcbiAgICBudW1lcmF0b3I6IHN0cmluZyxcbiAgICBkZW5vbWluYXRvcjogbnVtYmVyIHwgc3RyaW5nXG4gICkgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IHpcbiAgICAgIC5vYmplY3Qoe1xuICAgICAgICBbbnVtZXJhdG9yXTogei5udW1iZXIoKSxcbiAgICAgICAgW2Rlbm9taW5hdG9yXTogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgfSlcbiAgICAgIC5yZWZpbmUoX2RhdGEgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGRlbm9taW5hdG9yID09PSAnc3RyaW5nJyAmJiAhaW5wdXRbZGVub21pbmF0b3JdKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IElucHV0VmFsaWRhdGlvbkVycm9yKFxuICAgICAgICAgICAgZXJyb3JCdWlsZGVyKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogYFxcYCR7ZGVub21pbmF0b3J9XFxgIGlzIG1pc3NpbmcgZnJvbSB0aGUgaW5wdXRgLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG5cbiAgICByZXR1cm4gdmFsaWRhdGU8ei5pbmZlcjx0eXBlb2Ygc2NoZW1hPj4oc2NoZW1hLCBpbnB1dCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgZGl2aXNpb24gb2YgZWFjaCBpbnB1dCBwYXJhbWV0ZXIuXG4gICAqL1xuICBjb25zdCBleGVjdXRlID0gYXN5bmMgKGlucHV0czogUGx1Z2luUGFyYW1zW10pID0+IHtcbiAgICBjb25zdCBzYWZlR2xvYmFsQ29uZmlnID0gdmFsaWRhdGVHbG9iYWxDb25maWcoKTtcbiAgICBjb25zdCB7bnVtZXJhdG9yLCBkZW5vbWluYXRvciwgb3V0cHV0fSA9IHNhZmVHbG9iYWxDb25maWc7XG5cbiAgICByZXR1cm4gaW5wdXRzLm1hcChpbnB1dCA9PiB7XG4gICAgICBjb25zdCBzYWZlSW5wdXQgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIHZhbGlkYXRlU2luZ2xlSW5wdXQoaW5wdXQsIG51bWVyYXRvciwgZGVub21pbmF0b3IpXG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgW291dHB1dF06IGNhbGN1bGF0ZURpdmlkZShzYWZlSW5wdXQsIG51bWVyYXRvciwgZGVub21pbmF0b3IpLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZGl2aXNpb24gb2YgdGhlIGdpdmVuIHBhcmFtZXRlci5cbiAgICovXG4gIGNvbnN0IGNhbGN1bGF0ZURpdmlkZSA9IChcbiAgICBpbnB1dDogUGx1Z2luUGFyYW1zLFxuICAgIG51bWVyYXRvcjogc3RyaW5nLFxuICAgIGRlbm9taW5hdG9yOiBudW1iZXIgfCBzdHJpbmdcbiAgKSA9PiBpbnB1dFtudW1lcmF0b3JdIC8gKGlucHV0W2Rlbm9taW5hdG9yXSB8fCBkZW5vbWluYXRvcik7XG5cbiAgcmV0dXJuIHtcbiAgICBtZXRhZGF0YSxcbiAgICBleGVjdXRlLFxuICB9O1xufTtcbiJdfQ==