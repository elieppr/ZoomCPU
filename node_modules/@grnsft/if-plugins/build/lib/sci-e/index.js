"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SciE = void 0;
const zod_1 = require("zod");
const validations_1 = require("../../util/validations");
const SciE = () => {
    const energyMetrics = ['cpu/energy', 'memory/energy', 'network/energy'];
    const metadata = {
        kind: 'execute',
    };
    /**
     * Calculate the total emissions for a list of inputs.
     */
    const execute = async (inputs) => {
        return inputs.map(input => {
            const safeInput = Object.assign({}, input, validateSingleInput(input));
            return {
                ...input,
                energy: calculateEnergy(safeInput),
            };
        });
    };
    /**
     * Checks for required fields in input.
     */
    const validateSingleInput = (input) => {
        const schema = zod_1.z
            .object({
            'cpu/energy': zod_1.z.number().gte(0).min(0).optional(),
            'memory/energy': zod_1.z.number().gte(0).min(0).optional(),
            'network/energy': zod_1.z.number().gte(0).min(0).optional(),
        })
            .refine(validations_1.atLeastOneDefined, {
            message: `At least one of ${energyMetrics} should present.`,
        });
        return (0, validations_1.validate)(schema, input);
    };
    /**
     * Calculates the sum of the energy components.
     */
    const calculateEnergy = (input) => {
        return energyMetrics.reduce((acc, metric) => {
            if (input && input[metric]) {
                acc += input[metric];
            }
            return acc;
        }, 0);
    };
    return {
        metadata,
        execute,
    };
};
exports.SciE = SciE;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3NjaS1lL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUFzQjtBQUt0Qix3REFBbUU7QUFFNUQsTUFBTSxJQUFJLEdBQUcsR0FBb0IsRUFBRTtJQUN4QyxNQUFNLGFBQWEsR0FBRyxDQUFDLFlBQVksRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN4RSxNQUFNLFFBQVEsR0FBRztRQUNmLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxNQUFzQixFQUFFLEVBQUU7UUFDL0MsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRXZFLE9BQU87Z0JBQ0wsR0FBRyxLQUFLO2dCQUNSLE1BQU0sRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDO2FBQ25DLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGOztPQUVHO0lBQ0gsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtRQUNsRCxNQUFNLE1BQU0sR0FBRyxPQUFDO2FBQ2IsTUFBTSxDQUFDO1lBQ04sWUFBWSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNqRCxlQUFlLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ3BELGdCQUFnQixFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtTQUN0RCxDQUFDO2FBQ0QsTUFBTSxDQUFDLCtCQUFpQixFQUFFO1lBQ3pCLE9BQU8sRUFBRSxtQkFBbUIsYUFBYSxrQkFBa0I7U0FDNUQsQ0FBQyxDQUFDO1FBRUwsT0FBTyxJQUFBLHNCQUFRLEVBQXlCLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sZUFBZSxHQUFHLENBQUMsS0FBbUIsRUFBRSxFQUFFO1FBQzlDLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMxQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2QixDQUFDO1lBRUQsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsUUFBUTtRQUNSLE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBckRXLFFBQUEsSUFBSSxRQXFEZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7en0gZnJvbSAnem9kJztcblxuaW1wb3J0IHtQbHVnaW5JbnRlcmZhY2V9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtQbHVnaW5QYXJhbXN9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5cbmltcG9ydCB7dmFsaWRhdGUsIGF0TGVhc3RPbmVEZWZpbmVkfSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRpb25zJztcblxuZXhwb3J0IGNvbnN0IFNjaUUgPSAoKTogUGx1Z2luSW50ZXJmYWNlID0+IHtcbiAgY29uc3QgZW5lcmd5TWV0cmljcyA9IFsnY3B1L2VuZXJneScsICdtZW1vcnkvZW5lcmd5JywgJ25ldHdvcmsvZW5lcmd5J107XG4gIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgIGtpbmQ6ICdleGVjdXRlJyxcbiAgfTtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSB0b3RhbCBlbWlzc2lvbnMgZm9yIGEgbGlzdCBvZiBpbnB1dHMuXG4gICAqL1xuICBjb25zdCBleGVjdXRlID0gYXN5bmMgKGlucHV0czogUGx1Z2luUGFyYW1zW10pID0+IHtcbiAgICByZXR1cm4gaW5wdXRzLm1hcChpbnB1dCA9PiB7XG4gICAgICBjb25zdCBzYWZlSW5wdXQgPSBPYmplY3QuYXNzaWduKHt9LCBpbnB1dCwgdmFsaWRhdGVTaW5nbGVJbnB1dChpbnB1dCkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5pbnB1dCxcbiAgICAgICAgZW5lcmd5OiBjYWxjdWxhdGVFbmVyZ3koc2FmZUlucHV0KSxcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG4gIC8qKlxuICAgKiBDaGVja3MgZm9yIHJlcXVpcmVkIGZpZWxkcyBpbiBpbnB1dC5cbiAgICovXG4gIGNvbnN0IHZhbGlkYXRlU2luZ2xlSW5wdXQgPSAoaW5wdXQ6IFBsdWdpblBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IHpcbiAgICAgIC5vYmplY3Qoe1xuICAgICAgICAnY3B1L2VuZXJneSc6IHoubnVtYmVyKCkuZ3RlKDApLm1pbigwKS5vcHRpb25hbCgpLFxuICAgICAgICAnbWVtb3J5L2VuZXJneSc6IHoubnVtYmVyKCkuZ3RlKDApLm1pbigwKS5vcHRpb25hbCgpLFxuICAgICAgICAnbmV0d29yay9lbmVyZ3knOiB6Lm51bWJlcigpLmd0ZSgwKS5taW4oMCkub3B0aW9uYWwoKSxcbiAgICAgIH0pXG4gICAgICAucmVmaW5lKGF0TGVhc3RPbmVEZWZpbmVkLCB7XG4gICAgICAgIG1lc3NhZ2U6IGBBdCBsZWFzdCBvbmUgb2YgJHtlbmVyZ3lNZXRyaWNzfSBzaG91bGQgcHJlc2VudC5gLFxuICAgICAgfSk7XG5cbiAgICByZXR1cm4gdmFsaWRhdGU8ei5pbmZlcjx0eXBlb2Ygc2NoZW1hPj4oc2NoZW1hLCBpbnB1dCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIHN1bSBvZiB0aGUgZW5lcmd5IGNvbXBvbmVudHMuXG4gICAqL1xuICBjb25zdCBjYWxjdWxhdGVFbmVyZ3kgPSAoaW5wdXQ6IFBsdWdpblBhcmFtcykgPT4ge1xuICAgIHJldHVybiBlbmVyZ3lNZXRyaWNzLnJlZHVjZSgoYWNjLCBtZXRyaWMpID0+IHtcbiAgICAgIGlmIChpbnB1dCAmJiBpbnB1dFttZXRyaWNdKSB7XG4gICAgICAgIGFjYyArPSBpbnB1dFttZXRyaWNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIDApO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbWV0YWRhdGEsXG4gICAgZXhlY3V0ZSxcbiAgfTtcbn07XG4iXX0=