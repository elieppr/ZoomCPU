"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsvExport = void 0;
const path = require("path");
const fs = require("fs/promises");
const zod_1 = require("zod");
const helpers_1 = require("../../util/helpers");
const validations_1 = require("../../util/validations");
const errors_1 = require("../../util/errors");
const { MakeDirectoryError, WriteFileError, InputValidationError } = errors_1.ERRORS;
const CsvExport = () => {
    const metadata = { kind: 'execute' };
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.CsvExport.name);
    const createCsvContent = (inputs, headers) => {
        return [
            headers.join(','),
            ...inputs.map(row => headers.map(fieldName => row[fieldName]).join(',')),
        ].join('\r\n');
    };
    const execute = async (inputs, config) => {
        const validatedConfig = validateConfig(config);
        const { 'output-path': outputPath, headers = [] } = validatedConfig;
        const dirPath = path.dirname(outputPath);
        try {
            await fs.mkdir(dirPath, { recursive: true });
        }
        catch (error) {
            throw new MakeDirectoryError(errorBuilder({
                message: `Failed to create directory for CSV at path: ${dirPath} ${error}`,
            }));
        }
        const contentHeaders = headers &&
            headers.length === 0 &&
            Array.isArray(inputs) &&
            inputs.length > 0
            ? Object.keys(inputs[0])
            : headers;
        const contents = createCsvContent(inputs, contentHeaders);
        try {
            await fs.writeFile(outputPath, contents);
        }
        catch (error) {
            throw new WriteFileError(errorBuilder({
                message: `Failed to write CSV to ${outputPath} ${error}`,
            }));
        }
        return inputs;
    };
    const validateConfig = (config) => {
        if (!config) {
            throw new InputValidationError(errorBuilder({ message: 'Configuration data is missing' }));
        }
        const schema = zod_1.z.object({
            'output-path': zod_1.z.string(),
            headers: zod_1.z.string().array().optional(),
        });
        return (0, validations_1.validate)(schema, config);
    };
    return {
        metadata,
        execute,
    };
};
exports.CsvExport = CsvExport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Nzdi1leHBvcnQvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTZCO0FBQzdCLGtDQUFrQztBQUNsQyw2QkFBc0I7QUFLdEIsZ0RBQXFEO0FBQ3JELHdEQUFnRDtBQUNoRCw4Q0FBeUM7QUFFekMsTUFBTSxFQUFDLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxvQkFBb0IsRUFBQyxHQUFHLGVBQU0sQ0FBQztBQUVuRSxNQUFNLFNBQVMsR0FBRyxHQUFvQixFQUFFO0lBQzdDLE1BQU0sUUFBUSxHQUFHLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDO0lBRW5DLE1BQU0sWUFBWSxHQUFHLElBQUEsMkJBQWlCLEVBQUMsaUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2RCxNQUFNLGdCQUFnQixHQUFHLENBQ3ZCLE1BQXNCLEVBQ3RCLE9BQWlCLEVBQ1QsRUFBRTtRQUNWLE9BQU87WUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNqQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pCLENBQUMsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxNQUFzQixFQUFFLE1BQXFCLEVBQUUsRUFBRTtRQUN0RSxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFL0MsTUFBTSxFQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLEVBQUUsRUFBQyxHQUFHLGVBQWUsQ0FBQztRQUNsRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQztZQUNILE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxrQkFBa0IsQ0FDMUIsWUFBWSxDQUFDO2dCQUNYLE9BQU8sRUFBRSwrQ0FBK0MsT0FBTyxJQUFJLEtBQUssRUFBRTthQUMzRSxDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUM7UUFFRCxNQUFNLGNBQWMsR0FDbEIsT0FBTztZQUNQLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUNwQixLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNyQixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDZixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUVkLE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUUxRCxJQUFJLENBQUM7WUFDSCxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsTUFBTSxJQUFJLGNBQWMsQ0FDdEIsWUFBWSxDQUFDO2dCQUNYLE9BQU8sRUFBRSwwQkFBMEIsVUFBVSxJQUFJLEtBQUssRUFBRTthQUN6RCxDQUFDLENBQ0gsQ0FBQztRQUNKLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxDQUFDLE1BQXFCLEVBQUUsRUFBRTtRQUMvQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDWixNQUFNLElBQUksb0JBQW9CLENBQzVCLFlBQVksQ0FBQyxFQUFDLE9BQU8sRUFBRSwrQkFBK0IsRUFBQyxDQUFDLENBQ3pELENBQUM7UUFDSixDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN0QixhQUFhLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtZQUN6QixPQUFPLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRTtTQUN2QyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUEsc0JBQVEsRUFBeUIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxRQUFRO1FBQ1IsT0FBTztLQUNSLENBQUM7QUFDSixDQUFDLENBQUM7QUF6RVcsUUFBQSxTQUFTLGFBeUVwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQge3p9IGZyb20gJ3pvZCc7XG5cbmltcG9ydCB7UGx1Z2luSW50ZXJmYWNlfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7Q29uZmlnUGFyYW1zLCBQbHVnaW5QYXJhbXN9IGZyb20gJy4uLy4uL3R5cGVzL2NvbW1vbic7XG5cbmltcG9ydCB7YnVpbGRFcnJvck1lc3NhZ2V9IGZyb20gJy4uLy4uL3V0aWwvaGVscGVycyc7XG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuLi8uLi91dGlsL3ZhbGlkYXRpb25zJztcbmltcG9ydCB7RVJST1JTfSBmcm9tICcuLi8uLi91dGlsL2Vycm9ycyc7XG5cbmNvbnN0IHtNYWtlRGlyZWN0b3J5RXJyb3IsIFdyaXRlRmlsZUVycm9yLCBJbnB1dFZhbGlkYXRpb25FcnJvcn0gPSBFUlJPUlM7XG5cbmV4cG9ydCBjb25zdCBDc3ZFeHBvcnQgPSAoKTogUGx1Z2luSW50ZXJmYWNlID0+IHtcbiAgY29uc3QgbWV0YWRhdGEgPSB7a2luZDogJ2V4ZWN1dGUnfTtcblxuICBjb25zdCBlcnJvckJ1aWxkZXIgPSBidWlsZEVycm9yTWVzc2FnZShDc3ZFeHBvcnQubmFtZSk7XG5cbiAgY29uc3QgY3JlYXRlQ3N2Q29udGVudCA9IChcbiAgICBpbnB1dHM6IFBsdWdpblBhcmFtc1tdLFxuICAgIGhlYWRlcnM6IHN0cmluZ1tdXG4gICk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGhlYWRlcnMuam9pbignLCcpLFxuICAgICAgLi4uaW5wdXRzLm1hcChyb3cgPT4gaGVhZGVycy5tYXAoZmllbGROYW1lID0+IHJvd1tmaWVsZE5hbWVdKS5qb2luKCcsJykpLFxuICAgIF0uam9pbignXFxyXFxuJyk7XG4gIH07XG5cbiAgY29uc3QgZXhlY3V0ZSA9IGFzeW5jIChpbnB1dHM6IFBsdWdpblBhcmFtc1tdLCBjb25maWc/OiBDb25maWdQYXJhbXMpID0+IHtcbiAgICBjb25zdCB2YWxpZGF0ZWRDb25maWcgPSB2YWxpZGF0ZUNvbmZpZyhjb25maWcpO1xuXG4gICAgY29uc3QgeydvdXRwdXQtcGF0aCc6IG91dHB1dFBhdGgsIGhlYWRlcnMgPSBbXX0gPSB2YWxpZGF0ZWRDb25maWc7XG4gICAgY29uc3QgZGlyUGF0aCA9IHBhdGguZGlybmFtZShvdXRwdXRQYXRoKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmcy5ta2RpcihkaXJQYXRoLCB7cmVjdXJzaXZlOiB0cnVlfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBNYWtlRGlyZWN0b3J5RXJyb3IoXG4gICAgICAgIGVycm9yQnVpbGRlcih7XG4gICAgICAgICAgbWVzc2FnZTogYEZhaWxlZCB0byBjcmVhdGUgZGlyZWN0b3J5IGZvciBDU1YgYXQgcGF0aDogJHtkaXJQYXRofSAke2Vycm9yfWAsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRlbnRIZWFkZXJzID1cbiAgICAgIGhlYWRlcnMgJiZcbiAgICAgIGhlYWRlcnMubGVuZ3RoID09PSAwICYmXG4gICAgICBBcnJheS5pc0FycmF5KGlucHV0cykgJiZcbiAgICAgIGlucHV0cy5sZW5ndGggPiAwXG4gICAgICAgID8gT2JqZWN0LmtleXMoaW5wdXRzWzBdKVxuICAgICAgICA6IGhlYWRlcnM7XG5cbiAgICBjb25zdCBjb250ZW50cyA9IGNyZWF0ZUNzdkNvbnRlbnQoaW5wdXRzLCBjb250ZW50SGVhZGVycyk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKG91dHB1dFBhdGgsIGNvbnRlbnRzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFdyaXRlRmlsZUVycm9yKFxuICAgICAgICBlcnJvckJ1aWxkZXIoe1xuICAgICAgICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gd3JpdGUgQ1NWIHRvICR7b3V0cHV0UGF0aH0gJHtlcnJvcn1gLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5wdXRzO1xuICB9O1xuXG4gIGNvbnN0IHZhbGlkYXRlQ29uZmlnID0gKGNvbmZpZz86IENvbmZpZ1BhcmFtcykgPT4ge1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICB0aHJvdyBuZXcgSW5wdXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgIGVycm9yQnVpbGRlcih7bWVzc2FnZTogJ0NvbmZpZ3VyYXRpb24gZGF0YSBpcyBtaXNzaW5nJ30pXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAgICdvdXRwdXQtcGF0aCc6IHouc3RyaW5nKCksXG4gICAgICBoZWFkZXJzOiB6LnN0cmluZygpLmFycmF5KCkub3B0aW9uYWwoKSxcbiAgICB9KTtcblxuICAgIHJldHVybiB2YWxpZGF0ZTx6LmluZmVyPHR5cGVvZiBzY2hlbWE+PihzY2hlbWEsIGNvbmZpZyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBtZXRhZGF0YSxcbiAgICBleGVjdXRlLFxuICB9O1xufTtcbiJdfQ==