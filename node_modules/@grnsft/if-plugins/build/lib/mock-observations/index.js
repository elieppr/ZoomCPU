"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockObservations = void 0;
const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc");
const timezone = require("dayjs/plugin/timezone");
const helpers_1 = require("../../util/helpers");
const errors_1 = require("../../util/errors");
const common_generator_1 = require("./helpers/common-generator");
const rand_int_generator_1 = require("./helpers/rand-int-generator");
dayjs.extend(utc);
dayjs.extend(timezone);
const { InputValidationError } = errors_1.ERRORS;
const MockObservations = (globalConfig) => {
    const errorBuilder = (0, helpers_1.buildErrorMessage)('MockObservations');
    const metadata = {
        kind: 'execute',
    };
    /**
     * Generate sets of mocked observations based on config.
     */
    const execute = async (inputs) => {
        const { duration, timeBuckets, components, generators } = await generateParamsFromConfig();
        const generatorToHistory = new Map();
        generators.forEach(generator => {
            generatorToHistory.set(generator, []);
        });
        const defaults = inputs && inputs[0];
        return Object.entries(components).reduce((acc, [_key, component]) => {
            timeBuckets.forEach(timeBucket => {
                const observation = createObservation({ duration, component, timeBucket, generators }, generatorToHistory);
                acc.push(Object.assign(observation, defaults));
            });
            return acc;
        }, []);
    };
    /**
     * Configures the MockObservations Plugin for IF
     */
    const generateParamsFromConfig = async () => {
        const timestampFrom = dayjs.tz(getValidatedParam('timestamp-from', globalConfig), 'UTC');
        const timestampTo = dayjs.tz(getValidatedParam('timestamp-to', globalConfig), 'UTC');
        const duration = getValidatedParam('duration', globalConfig);
        return {
            duration,
            timeBuckets: createTimeBuckets(timestampFrom, timestampTo, duration),
            components: getValidatedParam('components', globalConfig),
            generators: createGenerators(getValidatedParam('generators', globalConfig)),
        };
    };
    /*
     * validate a parameter is included in a given parameters map.
     * return the validated param value, otherwise throw an InputValidationError.
     */
    const getValidatedParam = (paramName, params) => {
        if (!(paramName in params)) {
            throw new InputValidationError(errorBuilder({ message: `${paramName} missing from global config` }));
        }
        return params[paramName];
    };
    /*
     * create time buckets based on start time, end time and duration of each bucket.
     */
    const createTimeBuckets = (timestampFrom, timestampTo, duration, timeBuckets = []) => {
        if (timestampFrom.isBefore(timestampTo) ||
            timestampFrom.add(duration, 'second').isBefore(timestampTo)) {
            return createTimeBuckets(timestampFrom.add(duration, 'second'), timestampTo, duration, [...timeBuckets, timestampFrom]);
        }
        return timeBuckets;
    };
    /*
     * create generators based on a given config
     */
    const createGenerators = (generatorsConfig) => {
        const createCommonGenerator = (config) => [
            (0, common_generator_1.CommonGenerator)(config),
        ];
        const createRandIntGenerators = (config) => {
            return Object.entries(config).map(([fieldToPopulate, value]) => (0, rand_int_generator_1.RandIntGenerator)(fieldToPopulate, value));
        };
        return Object.entries(generatorsConfig).flatMap(([key, value]) => {
            if (key === 'common') {
                return createCommonGenerator(value);
            }
            else if (key === 'randint') {
                return createRandIntGenerators(value).flat();
            }
            return [];
        });
    };
    /*
     * Creates time buckets based on start time, end time and duration of each bucket.
     */
    const createObservation = (observationParams, generatorToHistory) => {
        const { duration, component, timeBucket, generators } = observationParams;
        const timestamp = timeBucket.toISOString();
        const generateObservation = (generator) => {
            const history = generatorToHistory.get(generator) || [];
            const generated = generator.next(history);
            generatorToHistory.set(generator, [...history, generated.value]);
            return generated;
        };
        const generateObservations = (gen) => generateObservation(gen);
        const generatedValues = generators.map(generateObservations);
        const initialObservation = {
            timestamp,
            duration,
            ...component,
        };
        const generatedObservation = generatedValues.reduce((observation, generated) => Object.assign(observation, generated), initialObservation);
        return generatedObservation;
    };
    return {
        metadata,
        execute,
    };
};
exports.MockObservations = MockObservations;
//# sourceMappingURL=data:application/json;base64,