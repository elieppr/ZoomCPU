"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandIntGenerator = void 0;
const errors_1 = require("../../../util/errors");
const helpers_1 = require("../../../util/helpers");
const { InputValidationError } = errors_1.ERRORS;
const RandIntGenerator = (name, config) => {
    const errorBuilder = (0, helpers_1.buildErrorMessage)(exports.RandIntGenerator.name);
    const next = (_historical) => (validatedName && {
        [validatedName]: generateRandInt(getFieldToPopulate()),
    }) ||
        {};
    const validateName = (name) => {
        if (!name || name.trim() === '') {
            throw new InputValidationError(errorBuilder({
                message: '`name` is empty or all spaces',
            }));
        }
        return name;
    };
    const validateConfig = (config) => {
        if (!config || Object.keys(config).length === 0) {
            throw new InputValidationError(errorBuilder({
                message: 'Config must not be null or empty',
            }));
        }
        if (!Object.prototype.hasOwnProperty.call(config, 'min') ||
            !Object.prototype.hasOwnProperty.call(config, 'max')) {
            throw new InputValidationError(errorBuilder({
                message: 'Config is missing min or max',
            }));
        }
        return { min: config.min, max: config.max };
    };
    const validatedName = validateName(name);
    const validatedConfig = validateConfig(config);
    const getFieldToPopulate = () => {
        return {
            name: validatedName,
            min: validatedConfig.min,
            max: validatedConfig.max,
        };
    };
    const generateRandInt = (randIntGenerator) => {
        const randomNumber = Math.random();
        const scaledNumber = randomNumber * (randIntGenerator.max - randIntGenerator.min) +
            randIntGenerator.min;
        return Math.trunc(scaledNumber);
    };
    return {
        next,
    };
};
exports.RandIntGenerator = RandIntGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZC1pbnQtZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9tb2NrLW9ic2VydmF0aW9ucy9oZWxwZXJzL3JhbmQtaW50LWdlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxpREFBNEM7QUFDNUMsbURBQXdEO0FBS3hELE1BQU0sRUFBQyxvQkFBb0IsRUFBQyxHQUFHLGVBQU0sQ0FBQztBQUUvQixNQUFNLGdCQUFnQixHQUFHLENBQzlCLElBQVksRUFDWixNQUFvQixFQUNULEVBQUU7SUFDYixNQUFNLFlBQVksR0FBRyxJQUFBLDJCQUFpQixFQUFDLHdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTlELE1BQU0sSUFBSSxHQUFHLENBQUMsV0FBaUMsRUFBVSxFQUFFLENBQ3pELENBQUMsYUFBYSxJQUFJO1FBQ2hCLENBQUMsYUFBYSxDQUFDLEVBQUUsZUFBZSxDQUFDLGtCQUFrQixFQUFFLENBQUM7S0FDdkQsQ0FBQztRQUNGLEVBQUUsQ0FBQztJQUVMLE1BQU0sWUFBWSxHQUFHLENBQUMsSUFBbUIsRUFBVSxFQUFFO1FBQ25ELElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sSUFBSSxvQkFBb0IsQ0FDNUIsWUFBWSxDQUFDO2dCQUNYLE9BQU8sRUFBRSwrQkFBK0I7YUFDekMsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxDQUFDLE1BQW9CLEVBQThCLEVBQUU7UUFDMUUsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNoRCxNQUFNLElBQUksb0JBQW9CLENBQzVCLFlBQVksQ0FBQztnQkFDWCxPQUFPLEVBQUUsa0NBQWtDO2FBQzVDLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQztRQUNELElBQ0UsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQztZQUNwRCxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQ3BELENBQUM7WUFDRCxNQUFNLElBQUksb0JBQW9CLENBQzVCLFlBQVksQ0FBQztnQkFDWCxPQUFPLEVBQUUsOEJBQThCO2FBQ3hDLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sRUFBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsRUFBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFL0MsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUU7UUFDOUIsT0FBTztZQUNMLElBQUksRUFBRSxhQUFhO1lBQ25CLEdBQUcsRUFBRSxlQUFlLENBQUMsR0FBRztZQUN4QixHQUFHLEVBQUUsZUFBZSxDQUFDLEdBQUc7U0FDekIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLE1BQU0sZUFBZSxHQUFHLENBQ3RCLGdCQUF3QyxFQUNoQyxFQUFFO1FBQ1YsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ25DLE1BQU0sWUFBWSxHQUNoQixZQUFZLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDO1lBQzVELGdCQUFnQixDQUFDLEdBQUcsQ0FBQztRQUN2QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDO0lBRUYsT0FBTztRQUNMLElBQUk7S0FDTCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBcEVXLFFBQUEsZ0JBQWdCLG9CQW9FM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0tleVZhbHVlUGFpcn0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvY29tbW9uJztcbmltcG9ydCB7RVJST1JTfSBmcm9tICcuLi8uLi8uLi91dGlsL2Vycm9ycyc7XG5pbXBvcnQge2J1aWxkRXJyb3JNZXNzYWdlfSBmcm9tICcuLi8uLi8uLi91dGlsL2hlbHBlcnMnO1xuXG5pbXBvcnQge0dlbmVyYXRvcn0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQge1JhbmRJbnRHZW5lcmF0b3JQYXJhbXN9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3Qge0lucHV0VmFsaWRhdGlvbkVycm9yfSA9IEVSUk9SUztcblxuZXhwb3J0IGNvbnN0IFJhbmRJbnRHZW5lcmF0b3IgPSAoXG4gIG5hbWU6IHN0cmluZyxcbiAgY29uZmlnOiBLZXlWYWx1ZVBhaXJcbik6IEdlbmVyYXRvciA9PiB7XG4gIGNvbnN0IGVycm9yQnVpbGRlciA9IGJ1aWxkRXJyb3JNZXNzYWdlKFJhbmRJbnRHZW5lcmF0b3IubmFtZSk7XG5cbiAgY29uc3QgbmV4dCA9IChfaGlzdG9yaWNhbDogT2JqZWN0W10gfCB1bmRlZmluZWQpOiBPYmplY3QgPT5cbiAgICAodmFsaWRhdGVkTmFtZSAmJiB7XG4gICAgICBbdmFsaWRhdGVkTmFtZV06IGdlbmVyYXRlUmFuZEludChnZXRGaWVsZFRvUG9wdWxhdGUoKSksXG4gICAgfSkgfHxcbiAgICB7fTtcblxuICBjb25zdCB2YWxpZGF0ZU5hbWUgPSAobmFtZTogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyA9PiB7XG4gICAgaWYgKCFuYW1lIHx8IG5hbWUudHJpbSgpID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IElucHV0VmFsaWRhdGlvbkVycm9yKFxuICAgICAgICBlcnJvckJ1aWxkZXIoe1xuICAgICAgICAgIG1lc3NhZ2U6ICdgbmFtZWAgaXMgZW1wdHkgb3IgYWxsIHNwYWNlcycsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbiAgfTtcblxuICBjb25zdCB2YWxpZGF0ZUNvbmZpZyA9IChjb25maWc6IEtleVZhbHVlUGFpcik6IHttaW46IG51bWJlcjsgbWF4OiBudW1iZXJ9ID0+IHtcbiAgICBpZiAoIWNvbmZpZyB8fCBPYmplY3Qua2V5cyhjb25maWcpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IElucHV0VmFsaWRhdGlvbkVycm9yKFxuICAgICAgICBlcnJvckJ1aWxkZXIoe1xuICAgICAgICAgIG1lc3NhZ2U6ICdDb25maWcgbXVzdCBub3QgYmUgbnVsbCBvciBlbXB0eScsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ21pbicpIHx8XG4gICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ21heCcpXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgSW5wdXRWYWxpZGF0aW9uRXJyb3IoXG4gICAgICAgIGVycm9yQnVpbGRlcih7XG4gICAgICAgICAgbWVzc2FnZTogJ0NvbmZpZyBpcyBtaXNzaW5nIG1pbiBvciBtYXgnLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHttaW46IGNvbmZpZy5taW4sIG1heDogY29uZmlnLm1heH07XG4gIH07XG5cbiAgY29uc3QgdmFsaWRhdGVkTmFtZSA9IHZhbGlkYXRlTmFtZShuYW1lKTtcbiAgY29uc3QgdmFsaWRhdGVkQ29uZmlnID0gdmFsaWRhdGVDb25maWcoY29uZmlnKTtcblxuICBjb25zdCBnZXRGaWVsZFRvUG9wdWxhdGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHZhbGlkYXRlZE5hbWUsXG4gICAgICBtaW46IHZhbGlkYXRlZENvbmZpZy5taW4sXG4gICAgICBtYXg6IHZhbGlkYXRlZENvbmZpZy5tYXgsXG4gICAgfTtcbiAgfTtcblxuICBjb25zdCBnZW5lcmF0ZVJhbmRJbnQgPSAoXG4gICAgcmFuZEludEdlbmVyYXRvcjogUmFuZEludEdlbmVyYXRvclBhcmFtc1xuICApOiBudW1iZXIgPT4ge1xuICAgIGNvbnN0IHJhbmRvbU51bWJlciA9IE1hdGgucmFuZG9tKCk7XG4gICAgY29uc3Qgc2NhbGVkTnVtYmVyID1cbiAgICAgIHJhbmRvbU51bWJlciAqIChyYW5kSW50R2VuZXJhdG9yLm1heCAtIHJhbmRJbnRHZW5lcmF0b3IubWluKSArXG4gICAgICByYW5kSW50R2VuZXJhdG9yLm1pbjtcbiAgICByZXR1cm4gTWF0aC50cnVuYyhzY2FsZWROdW1iZXIpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmV4dCxcbiAgfTtcbn07XG4iXX0=